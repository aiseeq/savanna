#!/usr/bin/env python3
"""
LLM-Driven Development: Task Executor
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –∞–≥–µ–Ω—Ç–∞-–ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
"""

import os
import sys
import subprocess
import json
import time
import re
from pathlib import Path
from datetime import datetime

def read_task(task_name):
    """–ß–∏—Ç–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ —Ñ–∞–π–ª–∞"""
    task_file = Path("docs/tasks") / f"{task_name}.md"
    if not task_file.exists():
        raise FileNotFoundError(f"–ó–∞–¥–∞—á–∞ {task_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ docs/tasks/")
    
    return task_file.read_text(encoding='utf-8')

def save_state(task_name, iteration, executor_chat, checker_output=None, last_checker_output=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è llmdd —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    Path("llmdd").mkdir(exist_ok=True)
    state_file = Path("llmdd") / f"{task_name}_state.json"
    state = {
        "task_name": task_name,
        "iteration": iteration,
        "executor_chat": executor_chat,
        "checker_output": checker_output,
        "last_checker_output": last_checker_output,  # –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è feedback
        "timestamp": datetime.now().isoformat(),
        "status": "in_progress"
    }
    
    with open(state_file, 'w', encoding='utf-8') as f:
        json.dump(state, f, indent=2, ensure_ascii=False)

def load_state(task_name):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    state_file = Path("llmdd") / f"{task_name}_state.json"
    if not state_file.exists():
        return None
    
    try:
        with open(state_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, IOError):
        return None

def clear_state(task_name):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏)"""
    state_file = Path("llmdd") / f"{task_name}_state.json"
    if state_file.exists():
        state_file.unlink()

def mark_task_completed(task_name):
    """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é"""
    state_file = Path("llmdd") / f"{task_name}_state.json"
    if state_file.exists():
        with open(state_file, 'r', encoding='utf-8') as f:
            state = json.load(f)
        state["status"] = "completed"
        state["completion_time"] = datetime.now().isoformat()
        with open(state_file, 'w', encoding='utf-8') as f:
            json.dump(state, f, indent=2, ensure_ascii=False)

def run_claude(prompt, continue_chat=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Claude CLI —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    cmd = ["claude", "--dangerously-skip-permissions", "-p", "--output-format", "json"]
    
    if continue_chat:
        cmd.extend(["--resume", continue_chat])
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    Path("llmdd").mkdir(exist_ok=True)
    prompt_file = Path("llmdd/temp_prompt.md")
    prompt_file.write_text(prompt, encoding='utf-8')
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Claude —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º
        process = subprocess.Popen(
            cmd + [f"@{prompt_file}"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            encoding='utf-8',
            bufsize=1,  # –ü–æ—Å—Ç—Ä–æ—á–Ω–∞—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è
            universal_newlines=True
        )
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ —á–∏—Ç–∞–µ–º –≤–µ—Å—å –≤—ã–≤–æ–¥ —Å—Ä–∞–∑—É
        stdout, stderr = process.communicate()
        
        if process.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Claude (–∫–æ–¥ {process.returncode}): {stderr}")
            return None, None
            
        full_output = stdout
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è session_id –∏ content
        try:
            response_data = json.loads(full_output)
            chat_id = response_data.get('session_id')
            content = response_data.get('result', full_output)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'result' –≤–º–µ—Å—Ç–æ 'content'
            
            if chat_id:
                print(f"üîó –ù–∞–π–¥–µ–Ω Session ID: {chat_id}")
            else:
                print("‚ö†Ô∏è Session ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON –æ—Ç–≤–µ—Ç–µ")
                
            # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            print(content)
            
            return content, chat_id
            
        except json.JSONDecodeError:
            print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç")
            print(full_output)
            return full_output, None
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if prompt_file.exists():
            prompt_file.unlink()

def format_executor_prompt(task_content):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    return f"""–¢—ã –∞–≥–µ–Ω—Ç-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ LLM-Driven Development. 

–ó–ê–î–ê–ß–ê –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
{task_content}

–ü–†–ê–í–ò–õ–ê:
1. –í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞—á—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ
2. –ù–ï –æ–±—ä—è–≤–ª—è–π –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 
3. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏—Å–ø—Ä–∞–≤–ª—è–π –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
4. –í –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª llmdd/execution_complete.md —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —á—Ç–æ —Å–¥–µ–ª–∞–Ω–æ

–ù–∞—á–∏–Ω–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."""

def format_checker_prompt(task_content):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞-–ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ"""
    return f"""–¢—ã —Å—Ç—Ä–æ–≥–∏–π –∞–≥–µ–Ω—Ç-–ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ LLM-Driven Development.

–ó–ê–î–ê–ß–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
{task_content}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ü—Ä–æ—á–∏—Ç–∞–π –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–ê–ñ–î–´–ô –∫—Ä–∏—Ç–µ—Ä–∏–π –ø—Ä–∏–µ–º–∫–∏ –≤ –∑–∞–¥–∞—á–µ
2. –ü—Ä–æ–≤–µ—Ä—å –í–°–ï —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –æ—Ç—á–µ—Ç—ã)
3. –°—Ä–∞–≤–Ω–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ö–ê–ñ–î–´–ú —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º
4. –ù–ï –¥–æ–≤–µ—Ä—è–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º –∏–∑ –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è - –ø—Ä–æ–≤–µ—Ä—è–π –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–û
5. –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –û–î–ò–ù –∫—Ä–∏—Ç–µ—Ä–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω - –∑–∞–¥–∞—á–∞ –ù–ï –í–´–ü–û–õ–ù–ï–ù–ê

–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ü–†–û–í–ï–†–ö–ò:
- –û—Ç–∫—Ä–æ–π –∏ –¥–µ—Ç–∞–ª—å–Ω–æ –∏–∑—É—á–∏ –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
- –°–≤–µ—Ä—å –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏" —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
- –ò–≥–Ω–æ—Ä–∏—Ä—É–π –∫—Ä–∞—Å–∏–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –æ—Ç—á–µ—Ç–µ - —Å–º–æ—Ç—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –ü—Ä–∏ –º–∞–ª–µ–π—à–∏—Ö —Å–æ–º–Ω–µ–Ω–∏—è—Ö - –∑–∞–¥–∞—á–∞ –ù–ï –í–´–ü–û–õ–ù–ï–ù–ê

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–£–ô):

–ï–°–õ–ò –í–°–ï –ö–†–ò–¢–ï–†–ò–ò –í–´–ü–û–õ–ù–ï–ù–´:
"–ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê: [–¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø—Ä–∏–µ–º–∫–∏]"

–ï–°–õ–ò –•–û–¢–Ø –ë–´ –û–î–ò–ù –ö–†–ò–¢–ï–†–ò–ô –ù–ï –í–´–ü–û–õ–ù–ï–ù:
"–ó–ê–î–ê–ß–ê –ù–ï –í–´–ü–û–õ–ù–ï–ù–ê: [—Ç–æ—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è]"

–ü–†–ò–ú–ï–† –ê–ù–ê–õ–ò–ó–ê:
‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 1: [–ø—Ä–æ–≤–µ—Ä–µ–Ω, –≤—ã–ø–æ–ª–Ω–µ–Ω/–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω]
‚úÖ/‚ùå –ö—Ä–∏—Ç–µ—Ä–∏–π 2: [–ø—Ä–æ–≤–µ—Ä–µ–Ω, –≤—ã–ø–æ–ª–Ω–µ–Ω/–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω]
‚úÖ/‚ùå –ö—Ä–∏—Ç–µ—Ä–∏–π 3: [–ø—Ä–æ–≤–µ—Ä–µ–Ω, –≤—ã–ø–æ–ª–Ω–µ–Ω/–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω]

–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–¥–∏—Ä—á–∏–≤—ã–º –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º. –ù–∞—á–∏–Ω–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É."""

def format_feedback_prompt(checker_response):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –æ—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ"""
    return f"""–ê–≥–µ–Ω—Ç-–ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã:

{checker_response}

–ü—Ä–æ–¥–æ–ª–∂–∏ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π —Å —É—á–µ—Ç–æ–º —ç—Ç–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""

def main():
    if len(sys.argv) < 2 or len(sys.argv) > 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python task_executor.py <–∏–º—è_–∑–∞–¥–∞—á–∏> [--restart]")
        print("–ü—Ä–∏–º–µ—Ä: python task_executor.py center_animal_screenshot")
        print("–§–ª–∞–≥–∏:")
        print("  --restart    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)")
        sys.exit(1)
    
    task_name = sys.argv[1]
    force_restart = len(sys.argv) == 3 and sys.argv[2] == "--restart"
    
    try:
        # –ß–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É
        task_content = read_task(task_name)
        
        print("=" * 70)
        print("üöÄ LLM-DRIVEN DEVELOPMENT SYSTEM")
        print("=" * 70)
        print(f"üìã –ó–∞–¥–∞—á–∞: {task_name}")
        print("üîß –†–µ–∂–∏–º: –ê–≥–µ–Ω—Ç-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å + –ê–≥–µ–Ω—Ç-–ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π")
        print("‚öôÔ∏è  –ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: 10")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        saved_state = load_state(task_name)
        if not force_restart and saved_state and saved_state.get("status") == "in_progress":
            print("üîÑ –ù–ê–ô–î–ï–ù–û –°–û–•–†–ê–ù–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï")
            print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {saved_state['timestamp']}")
            print(f"üî¢ –ü—Ä–µ—Ä–≤–∞–Ω–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è: {saved_state['iteration'] + 1}")
            print("üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
            
            # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            if saved_state.get('checker_output'):
                start_iteration = saved_state['iteration'] + 1
                checker_output = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            else:
                start_iteration = saved_state['iteration']
                checker_output = saved_state.get('checker_output')
            
            executor_chat = saved_state['executor_chat']
        else:
            if force_restart:
                print("üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö")
                clear_state(task_name)
            else:
                print("üÜï –ù–û–í–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ß–ò")
                
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            execution_report = Path("llmdd/execution_complete.md")
            if execution_report.exists():
                execution_report.unlink()
                print("üóëÔ∏è  –£–¥–∞–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            
            start_iteration = 0
            executor_chat = None
            checker_output = None
        
        print("=" * 70)
        max_iterations = 10
        
        for iteration in range(start_iteration, max_iterations):
            print(f"\n{'='*60}")
            print(f"üìã –ò–¢–ï–†–ê–¶–ò–Ø {iteration + 1}/{max_iterations}")
            print(f"{'='*60}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è 
            should_run_executor = False
            
            if iteration == 0:
                # –ü–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è - –≤—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                should_run_executor = True
                print("\nüîß –ê–ì–ï–ù–¢-–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨: –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
                print("‚îÄ" * 50)
                executor_prompt = format_executor_prompt(task_content)
                executor_output, executor_chat = run_claude(executor_prompt)
                
            elif iteration > 0:
                # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—á–µ—Ç—ã
                should_run_executor = True
                print("\nüîß –ê–ì–ï–ù–¢-–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨: –ò—Å–ø—Ä–∞–≤–ª—è—é –Ω–µ–¥–æ—á–µ—Ç—ã...")
                print("‚îÄ" * 50)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–≤–æ–¥ –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ –¥–ª—è feedback
                if checker_output or (saved_state and saved_state.get('last_checker_output')):
                    feedback_source = checker_output or saved_state.get('last_checker_output')
                    feedback_prompt = format_feedback_prompt(feedback_source)
                    executor_output, _ = run_claude(feedback_prompt, executor_chat)
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ, –Ω–∞—á–∏–Ω–∞—é –∑–∞–Ω–æ–≤–æ...")
                    executor_prompt = format_executor_prompt(task_content)
                    executor_output, executor_chat = run_claude(executor_prompt)
            
            if should_run_executor:
                if not executor_output:
                    print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Claude CLI")
                    break
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                save_state(task_name, iteration, executor_chat)
                print(f"\n‚úÖ –ê–ì–ï–ù–¢-–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨: –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞-–ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ (–≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)
            print("\nüîç –ê–ì–ï–ù–¢-–ü–†–û–í–ï–†–Ø–Æ–©–ò–ô: –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            print("‚îÄ" * 50)
            checker_prompt = format_checker_prompt(task_content)
            checker_output, checker_chat = run_claude(checker_prompt)
            
            if not checker_output:
                print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞-–ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ")
                print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Claude CLI")
                break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ
            save_state(task_name, iteration, executor_chat, checker_output)
            print(f"\n‚úÖ –ê–ì–ï–ù–¢-–ü–†–û–í–ï–†–Ø–Æ–©–ò–ô: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ
            print(f"\n{'='*60}")
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò")
            print(f"{'='*60}")
            
            if "–ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê" in checker_output:
                print("\nüéâ –£–°–ü–ï–•! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                print("‚îÄ" * 50)
                print("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ê–≥–µ–Ω—Ç-–ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
                print("‚îÄ" * 50)
                
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                mark_task_completed(task_name)
                clear_state(task_name)
                print("üóëÔ∏è  –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–æ")
                break
            elif "–ó–ê–î–ê–ß–ê –ù–ï –í–´–ü–û–õ–ù–ï–ù–ê" in checker_output:
                print("\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
                print("‚îÄ" * 50)
                
                if iteration == max_iterations - 1:
                    print("‚ùå –î–û–°–¢–ò–ì–ù–£–¢–û –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ò–¢–ï–†–ê–¶–ò–ô")
                    print("üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ:")
                    print(checker_output)
                    print("‚îÄ" * 50)
                    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É—Ç–æ—á–Ω–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∑–∞–¥–∞—á—É")
                    break
                else:
                    print("üîÑ –ü–µ—Ä–µ–¥–∞—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∞–≥–µ–Ω—Ç—É-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—á–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–π—á–∞—Å
                    save_state(task_name, iteration, executor_chat, checker_output, checker_output)
            else:
                print("\n‚ö†Ô∏è  –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ô –û–¢–í–ï–¢ –û–¢ –ü–†–û–í–ï–†–Ø–Æ–©–ï–ì–û")
                print("‚îÄ" * 50)
                print(checker_output)
                print("‚îÄ" * 50)
                break
        
    except FileNotFoundError as e:
        print(f"‚ùå {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∑–∂–µ")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
        sys.exit(1)

if __name__ == "__main__":
    main()