package integration

import (
	"testing"

	"github.com/aiseeq/savanna/internal/animation"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestAttackAnimationFix –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∞–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞
func TestAttackAnimationFix(t *testing.T) {
	t.Parallel()
	world := core.NewWorld(1600, 1600, 42)
	combatSystem := simulation.NewCombatSystem()
	animSystem := animation.NewAnimationSystem()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
	animSystem.RegisterAnimation(animation.AnimAttack, 2, 6.0, false, nil) // –Ω–µ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–∞—è!
	animSystem.RegisterAnimation(animation.AnimIdle, 2, 1.0, true, nil)

	rabbit := simulation.CreateRabbit(world, 800, 800)
	wolf := simulation.CreateWolf(world, 810, 800)
	world.SetHunger(wolf, core.Hunger{Value: 10.0})

	initialHealth, _ := world.GetHealth(rabbit)
	t.Logf("=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–ù–ò–ú–ê–¶–ò–ò –ê–¢–ê–ö–ò ===")
	t.Logf("–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∑–∞–π—Ü–∞: %d", initialHealth.Current)

	deltaTime := float32(1.0 / 60.0)

	// –ò–º–∏—Ç–∏—Ä—É–µ–º updateAnimalAnimations –∫–∞–∫ –≤ –∏–≥—Ä–µ
	updateWolfAnimationFixed := func() {
		if anim, hasAnim := world.GetAnimation(wolf); hasAnim {
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
			var newAnimType animation.AnimationType
			if isWolfAttacking(world, wolf) {
				newAnimType = animation.AnimAttack
			} else {
				newAnimType = animation.AnimIdle
			}

			// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é ATTACK
			if anim.CurrentAnim != int(newAnimType) {
				if anim.CurrentAnim == int(animation.AnimAttack) && anim.Playing {
					// –ù–ï –º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∞—Ç–∞–∫–∏ –ø–æ–∫–∞ –æ–Ω–∞ –∏–≥—Ä–∞–µ—Ç!
					t.Logf("  –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –∏–≥—Ä–∞–µ—Ç - –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º (–∫–∞–¥—Ä %d)", anim.Frame)
				} else {
					anim.CurrentAnim = int(newAnimType)
					anim.Frame = 0
					anim.Timer = 0
					anim.Playing = true
					world.SetAnimation(wolf, anim)
					t.Logf("  –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ %s", newAnimType.String())
				}
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
			animComponent := animation.AnimationComponent{
				CurrentAnim: animation.AnimationType(anim.CurrentAnim),
				Frame:       anim.Frame,
				Timer:       anim.Timer,
				Playing:     anim.Playing,
				FacingRight: anim.FacingRight,
			}

			animSystem.Update(&animComponent, deltaTime)

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			anim.Frame = animComponent.Frame
			anim.Timer = animComponent.Timer
			anim.Playing = animComponent.Playing
			world.SetAnimation(wolf, anim)
		}
	}

	attackFramesSeen := make(map[int]bool)
	damageDealt := false

	// –°–∏–º—É–ª–∏—Ä—É–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
	for i := 0; i < 180; i++ {
		world.Update(deltaTime)
		updateWolfAnimationFixed()
		combatSystem.Update(world, deltaTime)

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–¥—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏
		if anim, hasAnim := world.GetAnimation(wolf); hasAnim {
			if anim.CurrentAnim == int(animation.AnimAttack) {
				attackFramesSeen[anim.Frame] = true

				if i%10 == 0 { // –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —Ç–∏–∫–æ–≤
					t.Logf("–¢–∏–∫ %3d: ATTACK –∫–∞–¥—Ä %d, –∏–≥—Ä–∞–µ—Ç: %t", i, anim.Frame, anim.Playing)
				}
			}
		}

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Ä–æ–Ω
		currentHealth, _ := world.GetHealth(rabbit)
		if !damageDealt && currentHealth.Current < initialHealth.Current {
			damageDealt = true
			anim, _ := world.GetAnimation(wolf)
			t.Logf("ü©∏ –£–†–û–ù –Ω–∞ —Ç–∏–∫–µ %d! –ö–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏: %d", i, anim.Frame)
		}

		// –ï—Å–ª–∏ –∑–∞—è—Ü —É–º–µ—Ä, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
		if currentHealth.Current == 0 {
			t.Logf("–ó–∞—è—Ü —É–º–µ—Ä –Ω–∞ —Ç–∏–∫–µ %d", i)
			break
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	t.Logf("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
	t.Logf("–ö–∞–¥—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã:")
	for frame := 0; frame <= 1; frame++ {
		if attackFramesSeen[frame] {
			t.Logf("  ‚úÖ –ö–∞–¥—Ä %d: –ü–û–ö–ê–ó–ê–ù", frame)
		} else {
			t.Logf("  ‚ùå –ö–∞–¥—Ä %d: –ù–ï –ü–û–ö–ê–ó–ê–ù", frame)
		}
	}

	if !attackFramesSeen[1] {
		t.Error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: 2-–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏ –ù–ï –ü–û–ö–ê–ó–ê–ù!")
	} else {
		t.Logf("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é")
	}

	if !damageDealt {
		t.Error("‚ùå –£—Ä–æ–Ω –Ω–µ –±—ã–ª –Ω–∞–Ω–µ—Å–µ–Ω!")
	} else {
		t.Logf("‚úÖ –£—Ä–æ–Ω –±—ã–ª –Ω–∞–Ω–µ—Å–µ–Ω")
	}
}
