package integration

import (
	"testing"

	"github.com/aiseeq/savanna/internal/animation"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestExactDamageTiming —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–≥–¥–∞ –Ω–∞–Ω–æ—Å–∏—Ç—Å—è —É—Ä–æ–Ω
func TestExactDamageTiming(t *testing.T) {
	t.Parallel()
	world := core.NewWorld(96, 96, 42)
	combatSystem := simulation.NewCombatSystem()

	// –°–æ–∑–¥–∞—ë–º –∂–∏–≤–æ—Ç–Ω—ã—Ö —Ä—è–¥–æ–º
	rabbit := simulation.CreateRabbit(world, 40, 48)
	wolf := simulation.CreateWolf(world, 45, 48)

	// –í–æ–ª–∫ –≥–æ–ª–æ–¥–µ–Ω
	world.SetHunger(wolf, core.Hunger{Value: 5.0})

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º AttackState —á–µ—Ä–µ–∑ CombatSystem
	combatSystem.Update(world, 1.0/60.0)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ AttackState —Å–æ–∑–¥–∞–Ω
	if !world.HasComponent(wolf, core.MaskAttackState) {
		t.Fatal("AttackState –Ω–µ —Å–æ–∑–¥–∞–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–æ–ª–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏")
	}

	initialHealth, _ := world.GetHealth(rabbit)
	t.Logf("=== –¢–û–ß–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ú–û–ú–ï–ù–¢–ê –£–†–û–ù–ê ===")
	t.Logf("–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∑–∞–π—Ü–∞: %d", initialHealth.Current)

	_ = initialHealth.Current // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
	scenarios := []struct {
		name  string
		frame int
	}{
		{"–ö–∞–¥—Ä 0", 0},
		{"–ö–∞–¥—Ä 1", 1},
	}

	for _, scenario := range scenarios {
		t.Logf("\n--- %s ---", scenario.name)

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–¥—Ä
		world.SetAnimation(wolf, core.Animation{
			CurrentAnim: int(animation.AnimAttack),
			Frame:       scenario.frame,
			Timer:       0,
			Playing:     true,
			FacingRight: true,
		})

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
		world.SetHealth(rabbit, core.Health{Current: 50, Max: 50})
		lastHealth := int16(50)

		t.Logf("–í–æ–ª–∫ –≤ ATTACK –∫–∞–¥—Ä %d", scenario.frame)

		// –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É
		combatSystem.Update(world, 1.0/60.0)

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è executeStrike
		if scenario.frame == 1 {
			combatSystem.Update(world, 1.0/60.0)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
		currentHealth, _ := world.GetHealth(rabbit)
		t.Logf("–ó–¥–æ—Ä–æ–≤—å–µ: %d -> %d", lastHealth, currentHealth.Current)

		if currentHealth.Current != lastHealth {
			t.Logf("ü©∏ –£–†–û–ù –ù–ê–ù–ï–°–ï–ù –Ω–∞ –∫–∞–¥—Ä–µ %d!", scenario.frame)
			if scenario.frame != 1 {
				t.Errorf("‚ùå –û–®–ò–ë–ö–ê: –£—Ä–æ–Ω –Ω–∞–Ω–µ—Å–µ–Ω –Ω–∞ –∫–∞–¥—Ä–µ %d, –∞ –¥–æ–ª–∂–µ–Ω –Ω–∞ –∫–∞–¥—Ä–µ 1!", scenario.frame)
			}
		} else {
			t.Logf("‚ö™ –£—Ä–æ–Ω –ù–ï –Ω–∞–Ω–µ—Å–µ–Ω –Ω–∞ –∫–∞–¥—Ä–µ %d", scenario.frame)
			if scenario.frame == 1 {
				t.Errorf("‚ùå –û–®–ò–ë–ö–ê: –£—Ä–æ–Ω –ù–ï –Ω–∞–Ω–µ—Å–µ–Ω –Ω–∞ –∫–∞–¥—Ä–µ 1, –∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–Ω–µ—Å–µ–Ω!")
			}
		}

		// –ñ–¥–µ–º —á—Ç–æ–±—ã –∫—É–ª–¥–∞—É–Ω –ø—Ä–æ—à–µ–ª
		for i := 0; i < 60; i++ {
			combatSystem.Update(world, 1.0/60.0)
		}
	}
}
