package integration

import (
	"fmt"
	"testing"

	"github.com/aiseeq/savanna/internal/adapters"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestDebugRealGame –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ
func TestDebugRealGame(t *testing.T) {
	t.Parallel()
	world := core.NewWorld(1600, 1600, 42)

	// –°–æ–∑–¥–∞—ë–º —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–µ –∂–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∫ –≤ main.go
	systemManager := core.NewSystemManager()
	combatSystem := simulation.NewCombatSystem()
	animalBehaviorSystem := simulation.NewAnimalBehaviorSystem(nil)
	movementSystem := simulation.NewMovementSystem(1600, 1600)

	// –í–∞–∂–Ω–æ: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
	// —á—Ç–æ–±—ã –±–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–≥–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏

	// –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –≤ main.go
	systemManager.AddSystem(&adapters.BehaviorSystemAdapter{System: animalBehaviorSystem})
	systemManager.AddSystem(&adapters.MovementSystemAdapter{System: movementSystem})
	systemManager.AddSystem(combatSystem)

	// –°–æ–∑–¥–∞—ë–º –∂–∏–≤–æ—Ç–Ω—ã—Ö
	rabbit := simulation.CreateRabbit(world, 800, 800)
	wolf := simulation.CreateWolf(world, 810, 800) // –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 10 –µ–¥–∏–Ω–∏—Ü

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
	wolfPos, _ := world.GetPosition(wolf)
	rabbitPos, _ := world.GetPosition(rabbit)
	initialDistance := (wolfPos.X-rabbitPos.X)*(wolfPos.X-rabbitPos.X) + (wolfPos.Y-rabbitPos.Y)*(wolfPos.Y-rabbitPos.Y)
	t.Logf("–ù–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–æ–ª–∫–æ–º –∏ –∑–∞–π—Ü–µ–º: %.1f (—Ç—Ä–µ–±—É–µ—Ç—Å—è <= 144 –¥–ª—è –∞—Ç–∞–∫–∏)", initialDistance)

	// –î–µ–ª–∞–µ–º –≤–æ–ª–∫–∞ –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã–º
	world.SetHunger(wolf, core.Hunger{Value: 10.0})

	t.Logf("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ê–õ–¨–ù–û–ô –ò–ì–†–´ ===")

	initialHealth, _ := world.GetHealth(rabbit)
	t.Logf("–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∑–∞–π—Ü–∞: %d", initialHealth.Current)

	deltaTime := float32(1.0 / 60.0)

	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–µ—Ç–∞–ª—å–Ω–æ
	for i := 0; i < 300; i++ {
		world.Update(deltaTime)
		systemManager.Update(world, deltaTime)

		// –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Ç–∏–∫–æ–≤
		if i%10 == 0 {
			health, _ := world.GetHealth(rabbit)
			hunger, _ := world.GetHunger(wolf)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
			hasDamageFlash := world.HasComponent(rabbit, core.MaskDamageFlash)
			hasCorpse := world.HasComponent(rabbit, core.MaskCorpse)
			hasEatingState := world.HasComponent(wolf, core.MaskEatingState)

			var damageFlashInfo string
			if hasDamageFlash {
				flash, _ := world.GetDamageFlash(rabbit)
				damageFlashInfo = fmt.Sprintf("–ï–°–¢–¨ (%.2f —Å–µ–∫)", flash.Timer)
			} else {
				damageFlashInfo = "–ù–ï–¢"
			}

			var corpseInfo string
			if hasCorpse {
				corpse, _ := world.GetCorpse(rabbit)
				corpseInfo = fmt.Sprintf("–ï–°–¢–¨ (%.1f)", corpse.NutritionalValue)
			} else {
				corpseInfo = "–ù–ï–¢"
			}

			var eatingInfo string
			if hasEatingState {
				eating, _ := world.GetEatingState(wolf)
				eatingInfo = fmt.Sprintf("–ï–°–¢–¨ (—Ü–µ–ª—å: %d)", eating.Target)
			} else {
				eatingInfo = "–ù–ï–¢"
			}

			t.Logf("–¢–∏–∫ %3d: HP %2d, –≥–æ–ª–æ–¥ %.0f%%, DamageFlash %s, Corpse %s, Eating %s",
				i, health.Current, hunger.Value, damageFlashInfo, corpseInfo, eatingInfo)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
		currentHealth, _ := world.GetHealth(rabbit)
		if currentHealth.Current != initialHealth.Current {
			t.Logf("ü©∏ –£–†–û–ù –Ω–∞ —Ç–∏–∫–µ %d: %d -> %d", i, initialHealth.Current, currentHealth.Current)

			// –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢: –ø—Ä–æ–≤–µ—Ä—è–µ–º DamageFlash —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Ä–æ–Ω–∞
			if world.HasComponent(rabbit, core.MaskDamageFlash) {
				flash, _ := world.GetDamageFlash(rabbit)
				t.Logf("‚úÖ DamageFlash –ï–°–¢–¨ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Ä–æ–Ω–∞: —Ç–∞–π–º–µ—Ä %.3f", flash.Timer)
			} else {
				t.Logf("‚ùå DamageFlash –ù–ï–¢ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Ä–æ–Ω–∞!")
			}

			initialHealth = currentHealth
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä—É–ø–∞
		if !world.HasComponent(rabbit, core.MaskCorpse) && currentHealth.Current == 0 {
			// –ó–∞—è—Ü —É–º–µ—Ä –Ω–æ —Ç—Ä—É–ø –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è
			if i > 0 { // –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ç–∏–∫
				t.Logf("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –∑–∞—è—Ü —É–º–µ—Ä –Ω–æ —Ç—Ä—É–ø –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –Ω–∞ —Ç–∏–∫–µ %d", i)
			}
		}

		// –ï—Å–ª–∏ —Ç—Ä—É–ø —Å–æ–∑–¥–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–µ–¥–∞–Ω–∏—è
		if world.HasComponent(rabbit, core.MaskCorpse) && !world.HasComponent(wolf, core.MaskEatingState) {
			// –ï—Å—Ç—å —Ç—Ä—É–ø –Ω–æ –Ω–µ—Ç –ø–æ–µ–¥–∞–Ω–∏—è
			wolfPos, _ := world.GetPosition(wolf)
			rabbitPos, _ := world.GetPosition(rabbit)
			distance := (wolfPos.X-rabbitPos.X)*(wolfPos.X-rabbitPos.X) + (wolfPos.Y-rabbitPos.Y)*(wolfPos.Y-rabbitPos.Y)

			if distance <= 15.0*15.0 { // –í —Ä–∞–¥–∏—É—Å–µ –ø–æ–µ–¥–∞–Ω–∏—è
				t.Logf("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –µ—Å—Ç—å —Ç—Ä—É–ø —Ä—è–¥–æ–º (–¥–∏—Å—Ç %.1f) –Ω–æ –ø–æ–µ–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –Ω–∞ —Ç–∏–∫–µ %d", distance, i)
			}
		}

		// –ï—Å–ª–∏ –∑–∞—è—Ü –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å—á–µ–∑ - —É—Å–ø–µ—Ö
		if !world.IsAlive(rabbit) {
			t.Logf("üéâ –£–°–ü–ï–•: –∑–∞—è—Ü –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—ä–µ–¥–µ–Ω –Ω–∞ —Ç–∏–∫–µ %d", i)
			return
		}
	}

	t.Logf("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–µ–¥–∞–Ω–∏—è")
}
