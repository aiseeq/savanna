package integration

import (
	"fmt"
	"testing"

	"github.com/aiseeq/savanna/internal/animation"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestWolfFullCycle —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∞—Ç–∞–∫–∞ -> —Å–º–µ—Ä—Ç—å -> –ø–æ–µ–¥–∞–Ω–∏–µ -> –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Ç—Ä—É–ø–∞
//
//nolint:gocognit,revive,funlen // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤–æ–ª–∫–∞
func TestWolfFullCycle(t *testing.T) {
	t.Parallel()
	world := core.NewWorld(640, 640, 42)
	combatSystem := simulation.NewCombatSystem()

	// –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
	wolfAnimSystem := animation.NewAnimationSystem()
	rabbitAnimSystem := animation.NewAnimationSystem()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –≤–æ–ª–∫–æ–≤ –∏ –∑–∞–π—Ü–µ–≤
	wolfAnimSystem.RegisterAnimation(animation.AnimAttack, 2, 6.0, false, nil)
	wolfAnimSystem.RegisterAnimation(animation.AnimEat, 2, 2.0, true, nil)
	wolfAnimSystem.RegisterAnimation(animation.AnimIdle, 2, 1.0, true, nil)

	rabbitAnimSystem.RegisterAnimation(animation.AnimIdle, 2, 1.0, true, nil)
	rabbitAnimSystem.RegisterAnimation(animation.AnimDeathDying, 2, 3.0, false, nil)

	animManager := animation.NewAnimationManager(wolfAnimSystem, rabbitAnimSystem)

	// –°–æ–∑–¥–∞—ë–º –∑–∞–π—Ü–∞ –∏ –≤–æ–ª–∫–∞ —Ä—è–¥–æ–º
	rabbit := simulation.CreateAnimal(world, core.TypeRabbit, 300, 300)
	wolf := simulation.CreateAnimal(world, core.TypeWolf, 301, 300) // –î–∏—Å—Ç–∞–Ω—Ü–∏—è 1 –ø–∏–∫—Å–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏

	// –î–µ–ª–∞–µ–º –≤–æ–ª–∫–∞ –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã–º
	world.SetHunger(wolf, core.Hunger{Value: 30.0})

	initialHealth, _ := world.GetHealth(rabbit)
	initialHunger, _ := world.GetHunger(wolf)
	t.Logf("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∑–¥–æ—Ä–æ–≤—å–µ –∑–∞–π—Ü–∞ %d, –≥–æ–ª–æ–¥ –≤–æ–ª–∫–∞ %.1f%%",
		initialHealth.Current, initialHunger.Value)

	deltaTime := float32(1.0 / 60.0)
	phase := "–∞—Ç–∞–∫–∞"
	attackCount := 0
	lastHealth := initialHealth.Current
	rabbitDied := false
	rabbitDeathTime := 0
	_ = rabbitDeathTime // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö
	eatingStarted := false
	eatingStartTime := 0

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ 1800 —Ç–∏–∫–æ–≤ (30 —Å–µ–∫—É–Ω–¥)
	for i := 0; i < 1800; i++ {
		world.Update(deltaTime)

		// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–æ–ª–∫–∞
		if anim, hasAnim := world.GetAnimation(wolf); hasAnim {
			var newAnimType animation.AnimationType
			if world.HasComponent(wolf, core.MaskEatingState) {
				newAnimType = animation.AnimEat
			} else if isWolfAttacking(world, wolf) {
				newAnimType = animation.AnimAttack
			} else {
				newAnimType = animation.AnimIdle
			}

			if anim.CurrentAnim != int(newAnimType) {
				anim.CurrentAnim = int(newAnimType)
				anim.Frame = 0
				anim.Timer = 0
				anim.Playing = true
				world.SetAnimation(wolf, anim)
			}

			animComponent := animation.AnimationComponent{
				CurrentAnim: animation.AnimationType(anim.CurrentAnim),
				Frame:       anim.Frame,
				Timer:       anim.Timer,
				Playing:     anim.Playing,
				FacingRight: anim.FacingRight,
			}

			wolfAnimSystem.Update(&animComponent, deltaTime)

			anim.Frame = animComponent.Frame
			anim.Timer = animComponent.Timer
			anim.Playing = animComponent.Playing
			world.SetAnimation(wolf, anim)
		}

		combatSystem.Update(world, deltaTime)
		animManager.UpdateAllAnimations(world, deltaTime) // –í–ê–ñ–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏!

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞—Ç–∞–∫–∏
		if world.IsAlive(rabbit) {
			currentHealth, _ := world.GetHealth(rabbit)
			if currentHealth.Current < lastHealth {
				attackCount++
				t.Logf("–ê—Ç–∞–∫–∞ %d –Ω–∞ —Ç–∏–∫–µ %d: –∑–¥–æ—Ä–æ–≤—å–µ %d -> %d",
					attackCount, i, lastHealth, currentHealth.Current)
				lastHealth = currentHealth.Current
			}
		}

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–º–µ—Ä—Ç—å –∑–∞–π—Ü–∞
		if !rabbitDied && world.HasComponent(rabbit, core.MaskCorpse) {
			rabbitDied = true
			_ = i // rabbitDeathTime –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
			phase = "—Å–º–µ—Ä—Ç—å"
			wolfHunger, _ := world.GetHunger(wolf)
			t.Logf("üê∞üíÄ –ó–∞—è—Ü —É–º–µ—Ä –Ω–∞ —Ç–∏–∫–µ %d –ø–æ—Å–ª–µ %d –∞—Ç–∞–∫, –≥–æ–ª–æ–¥ –≤–æ–ª–∫–∞ %.1f%%",
				i, attackCount, wolfHunger.Value)
		}

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–µ–¥–∞–Ω–∏—è
		if !eatingStarted && world.HasComponent(wolf, core.MaskEatingState) {
			eatingStarted = true
			eatingStartTime = i
			phase = "–ø–æ–µ–¥–∞–Ω–∏–µ"
			corpse, _ := world.GetCorpse(rabbit)
			t.Logf("üê∫üçΩÔ∏è –í–æ–ª–∫ –Ω–∞—á–∞–ª –µ—Å—Ç—å –Ω–∞ —Ç–∏–∫–µ %d, –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä—É–ø–∞ %.1f",
				i, corpse.NutritionalValue)
		}

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–¥–∞–Ω–∏—è (–≤–æ–ª–∫ –±–æ–ª—å—à–µ –Ω–µ –µ—Å—Ç)
		if rabbitDied && eatingStarted && !world.HasComponent(wolf, core.MaskEatingState) {
			finalHunger, _ := world.GetHunger(wolf)
			t.Logf("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω –Ω–∞ —Ç–∏–∫–µ %d (%.1f —Å–µ–∫): –∞—Ç–∞–∫–∏ %d, –ø–æ–µ–¥–∞–Ω–∏–µ %d —Ç–∏–∫–æ–≤, –≥–æ–ª–æ–¥ %.1f%% -> %.1f%%",
				i, float32(i)/60.0, attackCount, i-eatingStartTime, initialHunger.Value, finalHunger.Value)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ—à–ª–∏
			if attackCount < 1 {
				t.Errorf("–í–æ–ª–∫ –Ω–µ –∞—Ç–∞–∫–æ–≤–∞–ª (–∞—Ç–∞–∫: %d)", attackCount)
			}
			if !rabbitDied {
				t.Error("–ó–∞—è—Ü –Ω–µ —É–º–µ—Ä")
			}
			if !eatingStarted {
				t.Error("–í–æ–ª–∫ –Ω–µ –Ω–∞—á–∞–ª –µ—Å—Ç—å")
			}
			if finalHunger.Value <= initialHunger.Value {
				t.Errorf("–ì–æ–ª–æ–¥ –≤–æ–ª–∫–∞ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è: %.1f%% -> %.1f%%",
					initialHunger.Value, finalHunger.Value)
			}

			t.Logf("üéâ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ü–†–û–ô–î–ï–ù")
			return
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
		if i%120 == 0 {
			hunger, _ := world.GetHunger(wolf)
			anim, _ := world.GetAnimation(wolf)

			var status string
			if world.IsAlive(rabbit) {
				health, _ := world.GetHealth(rabbit)
				status = fmt.Sprintf("–∑–¥–æ—Ä–æ–≤—å–µ –∑–∞–π—Ü–∞ %d", health.Current)
			} else if world.HasComponent(rabbit, core.MaskCorpse) {
				corpse, _ := world.GetCorpse(rabbit)
				status = fmt.Sprintf("—Ç—Ä—É–ø, –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å %.1f", corpse.NutritionalValue)
			} else {
				status = "—Ç—Ä—É–ø —Å—ä–µ–¥–µ–Ω"
			}

			t.Logf("%.1f—Å [%s]: %s, –∞—Ç–∞–∫ %d, –≥–æ–ª–æ–¥ –≤–æ–ª–∫–∞ %.0f%%, –∞–Ω–∏–º–∞—Ü–∏—è %s",
				float32(i)/60.0, phase, status, attackCount, hunger.Value,
				animation.AnimationType(anim.CurrentAnim).String())
		}
	}

	// –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
	t.Errorf("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥. –§–∞–∑–∞: %s, –∞—Ç–∞–∫: %d, –∑–∞—è—Ü —É–º–µ—Ä: %t, –ø–æ–µ–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å: %t",
		phase, attackCount, rabbitDied, eatingStarted)
}
