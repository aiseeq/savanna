package integration

import (
	"testing"

	"github.com/aiseeq/savanna/internal/animation"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestAnimationProgression –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∞–Ω–∏–º–∞—Ü–∏—è ATTACK –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ—Ç –∫–∞–¥—Ä–∞ 0 –¥–æ –∫–∞–¥—Ä–∞ 1
func TestAnimationProgression(t *testing.T) {
	t.Parallel()
	world := core.NewWorld(96, 96, 42)

	// –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ö–ê–ö –í –ò–ì–†–ï
	wolfAnimationSystem := animation.NewAnimationSystem()
	wolfAnimationSystem.RegisterAnimation(animation.AnimAttack, 2, 6.0, false, nil) // 2 –∫–∞–¥—Ä–∞, –ù–ï –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–∞—è

	// –°–æ–∑–¥–∞—ë–º —Å–∏—Å—Ç–µ–º—ã
	combatSystem := simulation.NewCombatSystem()
	animalBehaviorSystem := simulation.NewAnimalBehaviorSystem(nil)
	movementSystem := simulation.NewMovementSystem(96, 96)

	// –°–æ–∑–¥–∞—ë–º –∂–∏–≤–æ—Ç–Ω—ã—Ö —Ä—è–¥–æ–º
	rabbit := simulation.CreateRabbit(world, 40, 48)
	wolf := simulation.CreateWolf(world, 45, 48)

	// –í–æ–ª–∫ –≥–æ–ª–æ–¥–µ–Ω
	world.SetHunger(wolf, core.Hunger{Value: 5.0})

	t.Logf("=== –¢–ï–°–¢ –ü–†–û–ì–†–ï–°–°–ò–ò –ê–ù–ò–ú–ê–¶–ò–ò ATTACK ===")

	deltaTime := float32(1.0 / 60.0) // 60 FPS

	// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ö–ê–ö –í –†–ï–ê–õ–¨–ù–û–ô –ò–ì–†–ï
	updateWolfAnimation := func() animation.AnimationType {
		anim, hasAnim := world.GetAnimation(wolf)
		if !hasAnim {
			return animation.AnimIdle
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
		var newAnimType animation.AnimationType
		if isWolfAttackingSimple(world, wolf) {
			newAnimType = animation.AnimAttack
		} else {
			newAnimType = animation.AnimIdle
		}

		// –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ú–ï–°–¢–û: –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é ATTACK
		if anim.CurrentAnim != int(newAnimType) {
			if anim.CurrentAnim == int(animation.AnimAttack) && anim.Playing {
				t.Logf("  [SYSTEM] –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ATTACK –∞–Ω–∏–º–∞—Ü–∏—é (–∫–∞–¥—Ä %d, –∏–≥—Ä–∞–µ—Ç: %t)", anim.Frame, anim.Playing)
				// –ù–ï –º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é!
			} else {
				t.Logf("  [SYSTEM] –°–º–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: %s -> %s",
					animation.AnimationType(anim.CurrentAnim).String(), newAnimType.String())
				anim.CurrentAnim = int(newAnimType)
				anim.Frame = 0
				anim.Timer = 0
				anim.Playing = true
				world.SetAnimation(wolf, anim)
			}
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
		animComponent := animation.AnimationComponent{
			CurrentAnim: animation.AnimationType(anim.CurrentAnim),
			Frame:       anim.Frame,
			Timer:       anim.Timer,
			Playing:     anim.Playing,
			FacingRight: anim.FacingRight,
		}

		oldFrame := animComponent.Frame
		oldPlaying := animComponent.Playing

		wolfAnimationSystem.Update(&animComponent, deltaTime)

		// –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
		if oldFrame != animComponent.Frame || oldPlaying != animComponent.Playing {
			t.Logf("  [ANIM] –ö–∞–¥—Ä %d->%d, –∏–≥—Ä–∞–µ—Ç %t->%t",
				oldFrame, animComponent.Frame, oldPlaying, animComponent.Playing)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		anim.Frame = animComponent.Frame
		anim.Timer = animComponent.Timer
		anim.Playing = animComponent.Playing
		world.SetAnimation(wolf, anim)

		return animation.AnimationType(anim.CurrentAnim)
	}

	framesSeenInOrder := []int{}
	lastFrame := -1

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –Ω–µ —É–≤–∏–¥–∏–º –ø–æ–ª–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏–º–∏—Ç
	for tick := 0; tick < 300; tick++ {
		world.Update(deltaTime)
		animalBehaviorSystem.Update(world, deltaTime)
		movementSystem.Update(world, deltaTime)
		combatSystem.Update(world, deltaTime)

		currentAnimType := updateWolfAnimation()

		if currentAnimType == animation.AnimAttack {
			anim, _ := world.GetAnimation(wolf)

			// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –∫–∞–¥—Ä–æ–≤
			if anim.Frame != lastFrame {
				framesSeenInOrder = append(framesSeenInOrder, anim.Frame)
				lastFrame = anim.Frame
				t.Logf("[TICK %3d] ATTACK –∫–∞–¥—Ä %d, –∏–≥—Ä–∞–µ—Ç: %t, —Ç–∞–π–º–µ—Ä: %.3f",
					tick, anim.Frame, anim.Playing, anim.Timer)
			}

			// –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å (–Ω–µ –∏–≥—Ä–∞–µ—Ç), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
			if !anim.Playing {
				t.Logf("[TICK %3d] –ê–Ω–∏–º–∞—Ü–∏—è ATTACK –∑–∞–≤–µ—Ä—à–µ–Ω–∞", tick)
				break
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ó–ú–ï–ù–ï–ù–ò–ï —É—Ä–æ–Ω–∞
		health, _ := world.GetHealth(rabbit)
		if tick == 0 {
			// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
			lastHealth := health.Current
			if lastHealth < 50 {
				t.Logf("[TICK %3d] ü©∏ –£–†–û–ù –ù–ê–ù–ï–°–ï–ù! –ó–¥–æ—Ä–æ–≤—å–µ: %d", tick, health.Current)
			}
		}

		// –ï—Å–ª–∏ –∑–∞—è—Ü —É–º–µ—Ä, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
		if health.Current == 0 {
			t.Logf("[TICK %3d] –ó–∞—è—Ü —É–º–µ—Ä", tick)
			break
		}
	}

	// –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
	t.Logf("\n=== –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ò–ò –ö–ê–î–†–û–í ===")
	t.Logf("–ö–∞–¥—Ä—ã –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –ø–æ—Ä—è–¥–∫–µ: %v", framesSeenInOrder)

	// –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò
	frame0Seen := false
	frame1Seen := false

	for _, frame := range framesSeenInOrder {
		if frame == 0 {
			frame0Seen = true
		}
		if frame == 1 {
			frame1Seen = true
		}
	}

	if !frame0Seen {
		t.Error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–∞–¥—Ä 0 (–ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä) –ù–ï –ü–û–ö–ê–ó–ê–ù!")
	} else {
		t.Logf("‚úÖ –ö–∞–¥—Ä 0 –ø–æ–∫–∞–∑–∞–Ω")
	}

	if !frame1Seen {
		t.Error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–∞–¥—Ä 1 (–≤—Ç–æ—Ä–æ–π –∫–∞–¥—Ä) –ù–ï –ü–û–ö–ê–ó–ê–ù!")
		t.Error("   –≠–¢–û –ò–ú–ï–ù–ù–û –¢–ê –ü–†–û–ë–õ–ï–ú–ê –û –ö–û–¢–û–†–û–ô –ì–û–í–û–†–ò–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨!")
	} else {
		t.Logf("‚úÖ –ö–∞–¥—Ä 1 –ø–æ–∫–∞–∑–∞–Ω")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	if len(framesSeenInOrder) >= 2 && framesSeenInOrder[0] == 0 && framesSeenInOrder[1] == 1 {
		t.Logf("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 0 -> 1")
	} else if frame0Seen && frame1Seen {
		t.Logf("‚ö†Ô∏è –ö–∞–¥—Ä—ã –ø–æ–∫–∞–∑–∞–Ω—ã, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: %v", framesSeenInOrder)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –º–∏–Ω–∏–º—É–º 2 –∫–∞–¥—Ä–∞
	if len(framesSeenInOrder) < 2 {
		t.Error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ 1 –∫–∞–¥—Ä –≤–º–µ—Å—Ç–æ 2!")
		t.Error("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏!")
	}
}

// isWolfAttackingSimple –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç–∞–∫–∏
func isWolfAttackingSimple(world *core.World, wolf core.EntityID) bool {
	hunger, hasHunger := world.GetHunger(wolf)
	if !hasHunger || hunger.Value > 60.0 {
		return false
	}

	pos, hasPos := world.GetPosition(wolf)
	if !hasPos {
		return false
	}

	nearestRabbit, foundRabbit := world.FindNearestByType(pos.X, pos.Y, 15.0, core.TypeRabbit)
	if !foundRabbit {
		return false
	}

	if world.HasComponent(nearestRabbit, core.MaskCorpse) {
		return false
	}

	rabbitPos, hasRabbitPos := world.GetPosition(nearestRabbit)
	if !hasRabbitPos {
		return false
	}

	distance := (pos.X-rabbitPos.X)*(pos.X-rabbitPos.X) + (pos.Y-rabbitPos.Y)*(pos.Y-rabbitPos.Y)
	return distance <= 12.0*12.0
}
