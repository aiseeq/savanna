package integration

import (
	"testing"

	"github.com/aiseeq/savanna/config"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/simulation"
	"github.com/aiseeq/savanna/tests/common"
)

// TestWolfContinuousHunting –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤–æ–ª–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ—Ö–æ—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–æ–µ–¥–∞–Ω–∏—è –∑–∞–π—Ü–∞
//
//nolint:gocognit,revive,funlen // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ—Ö–æ—Ç–Ω–∏—á—å–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤–æ–ª–∫–æ–≤
func TestWolfContinuousHunting(t *testing.T) {
	t.Parallel()
	cfg := config.LoadDefaultConfig()
	cfg.World.Size = 20

	worldSizePixels := float32(cfg.World.Size * 32)
	world := core.NewWorld(worldSizePixels, worldSizePixels, 42)

	// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –≤–æ–ª–∫–æ–≤
	// –í–æ–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å BehaviorSystem –¥–ª—è –æ—Ö–æ—Ç—ã + CombatSystem –¥–ª—è –∞—Ç–∞–∫
	bundle := common.CreateTestSystemBundle(worldSizePixels)
	systemManager := bundle.SystemManager
	animationAdapter := bundle.AnimationAdapter

	// –°–æ–∑–¥–∞—ë–º –º–Ω–æ–≥–æ –∑–∞–π—Ü–µ–≤ —Ä—è–¥–æ–º —Å –≤–æ–ª–∫–æ–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
	var rabbits []core.EntityID
	for i := 0; i < 5; i++ {
		// –°–æ–∑–¥–∞—ë–º –∑–∞–π—Ü–µ–≤ –≤ –Ω–µ–±–æ–ª—å—à–æ–º —Ä–∞–¥–∏—É—Å–µ –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞
		x := float32(300 + i*8) // –ó–∞–π—Ü—ã —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 8 –ø–∏–∫—Å–µ–ª–µ–π
		y := float32(300 + i*4) // –°–ª–µ–≥–∫–∞ —Å–º–µ—â–∞–µ–º –ø–æ Y
		rabbit := simulation.CreateAnimal(world, core.TypeRabbit, x, y)

		// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ–ª–∞–µ–º –∑–∞–π—Ü–µ–≤ –Ω–µ–ø–æ–¥–≤–∏–∂–Ω—ã–º–∏ —á—Ç–æ–±—ã –≤–æ–ª–∫ –∏—Ö –Ω–∞—à—ë–ª
		world.SetVelocity(rabbit, core.Velocity{X: 0, Y: 0})

		rabbits = append(rabbits, rabbit)
	}
	wolf := simulation.CreateAnimal(world, core.TypeWolf, 300, 300)

	// –î–µ–ª–∞–µ–º –≤–æ–ª–∫–∞ –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã–º
	world.SetSatiation(wolf, core.Satiation{Value: 5.0}) // 5% = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≥–æ–ª–æ–¥–Ω—ã–π

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	rabbitConfig, _ := world.GetAnimalConfig(rabbits[0])
	t.Logf("–°–æ–∑–¥–∞–Ω–æ %d –∑–∞–π—Ü–µ–≤, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: %d —Ö–∏—Ç–æ–≤", len(rabbits), rabbitConfig.MaxHealth)

	killedRabbits := 0
	deltaTime := float32(1.0 / 60.0)

	t.Logf("=== –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===")
	wolfHunger, _ := world.GetSatiation(wolf)
	wolfPos, _ := world.GetPosition(wolf)
	wolfBehavior, _ := world.GetBehavior(wolf)
	t.Logf("–í–æ–ª–∫: –ø–æ–∑–∏—Ü–∏—è (%.1f, %.1f), –≥–æ–ª–æ–¥ %.1f%%, –ø–æ–≤–µ–¥–µ–Ω–∏–µ %s",
		wolfPos.X, wolfPos.Y, wolfHunger.Value, wolfBehavior.Type.String())
	t.Logf("–ü–æ—Ä–æ–≥ –≥–æ–ª–æ–¥–∞ –≤–æ–ª–∫–∞: %.1f%%, –≤–∏–¥–∏–º–æ—Å—Ç—å %.1f —Ç–∞–π–ª–æ–≤",
		wolfBehavior.SatiationThreshold, wolfBehavior.VisionRange)

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ 6000 —Ç–∏–∫–æ–≤ (100 —Å–µ–∫—É–Ω–¥) –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≥–æ–ª–æ–¥–∞
	for i := 0; i < 6000; i++ {
		// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫ –≤ GUI
		world.Update(deltaTime)
		animationAdapter.Update(world, deltaTime) // –ê–Ω–∏–º–∞—Ü–∏–∏ –ü–ï–†–ï–î —Å–∏—Å—Ç–µ–º–∞–º–∏
		systemManager.Update(world, deltaTime)    // –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª—é—á–∞—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ

		// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 1200 —Ç–∏–∫–æ–≤ (20 —Å–µ–∫—É–Ω–¥)
		if i%1200 == 0 {
			wolfHunger, _ := world.GetSatiation(wolf)
			wolfPos, _ := world.GetPosition(wolf)
			hasAttackState := world.HasComponent(wolf, core.MaskAttackState)
			hasEatingState := world.HasComponent(wolf, core.MaskEatingState)

			t.Logf("–¢–∏–∫ %d (%.1fs): –í–æ–ª–∫ (%.1f,%.1f) –≥–æ–ª–æ–¥=%.1f%%, –∞—Ç–∞–∫–∞=%v, –µ–¥–∞=%v",
				i, float32(i)/60.0, wolfPos.X, wolfPos.Y, wolfHunger.Value, hasAttackState, hasEatingState)

			// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –≤–æ–ª–∫ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–ª—Å—è –Ω–æ –Ω–µ –∞—Ç–∞–∫—É–µ—Ç, —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –∫ –∑–∞–π—Ü–∞–º
			if wolfHunger.Value < 60.0 && !hasAttackState && killedRabbits > 0 {
				// –ù–∞—Ö–æ–¥–∏–º –∂–∏–≤–æ–≥–æ –∑–∞–π—Ü–∞ –∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ª–∫–∞ —Ä—è–¥–æ–º
				for _, rabbit := range rabbits {
					if world.IsAlive(rabbit) {
						rabbitPos, _ := world.GetPosition(rabbit)
						world.SetPosition(wolf, core.Position{X: rabbitPos.X + 5, Y: rabbitPos.Y})
						world.SetSatiation(wolf, core.Satiation{Value: 20.0})
						t.Logf("üîÑ –¢–µ–ª–µ–ø–æ—Ä—Ç –≤–æ–ª–∫–∞ –∫ –∑–∞–π—Ü—É (%.1f,%.1f) –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–¥–∞ –¥–æ 20%%", rabbitPos.X, rabbitPos.Y)
						break
					}
				}
			}
		}

		// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º—ë—Ä—Ç–≤—ã—Ö –∑–∞–π—Ü–µ–≤
		currentKilledCount := 0
		for _, rabbit := range rabbits {
			if !world.IsAlive(rabbit) {
				currentKilledCount++
			} else if health, ok := world.GetHealth(rabbit); ok && health.Current <= 0 {
				currentKilledCount++
			}
		}

		// –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–±–∏—Ç—ã—Ö –∑–∞–π—Ü–µ–≤ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å
		if currentKilledCount > killedRabbits {
			newKills := currentKilledCount - killedRabbits
			killedRabbits = currentKilledCount
			wolfHunger, _ := world.GetSatiation(wolf)
			t.Logf("‚úÖ –£–±–∏—Ç–æ –∑–∞–π—Ü–µ–≤: %d -> %d (+%d) –Ω–∞ —Ç–∏–∫–µ %d (%.1fs), –≥–æ–ª–æ–¥ –≤–æ–ª–∫–∞ %.1f%%",
				killedRabbits-newKills, killedRabbits, newKills, i, float32(i)/60.0, wolfHunger.Value)

			// –ï—Å–ª–∏ —É–±–∏–ª–∏ 2+ –∑–∞–π—Ü–µ–≤, —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –æ—Ö–æ—Ç–∞ –¥–æ–∫–∞–∑–∞–Ω–∞)
			if killedRabbits >= 2 {
				t.Logf("üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: —É–±–∏—Ç–æ %d –∑–∞–π—Ü–µ–≤ –∑–∞ %.1f —Å–µ–∫—É–Ω–¥", killedRabbits, float32(i)/60.0)
				break
			}
		}
	}

	t.Logf("–í–æ–ª–∫ —É–±–∏–ª %d –∑–∞–π—Ü–µ–≤ –∑–∞ 100 —Å–µ–∫—É–Ω–¥ —Å–∏–º—É–ª—è—Ü–∏–∏", killedRabbits)

	if killedRabbits < 2 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å —á—Ç–æ –≤–æ–ª–∫ —É–±—å—ë—Ç –º–∏–Ω–∏–º—É–º 2 –∑–∞–π—Ü–µ–≤ (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –æ—Ö–æ—Ç–∞), –Ω–æ —É–±–∏–ª —Ç–æ–ª—å–∫–æ %d –∏–∑ %d", killedRabbits, len(rabbits))
	} else {
		t.Logf("‚úÖ –í–æ–ª–∫ —É—Å–ø–µ—à–Ω–æ –≤–µ–¥—ë—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –æ—Ö–æ—Ç—É: —É–±–∏–ª %d –∏–∑ %d –∑–∞–π—Ü–µ–≤", killedRabbits, len(rabbits))
	}
}
