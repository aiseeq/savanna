package integration

import (
	"testing"

	"github.com/aiseeq/savanna/config"
	"github.com/aiseeq/savanna/internal/adapters"
	"github.com/aiseeq/savanna/internal/animation"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/generator"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestWolfEatingBehaviorImproved –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤–æ–ª–∫–æ–≤ –ø—Ä–∏ –ø–æ–µ–¥–∞–Ω–∏–∏
//
//nolint:gocognit,revive,funlen // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤–æ–ª–∫–æ–≤
func TestWolfEatingBehaviorImproved(t *testing.T) {
	t.Parallel()

	t.Logf("=== TDD: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤–æ–ª–∫–æ–≤ –ø—Ä–∏ –ø–æ–µ–¥–∞–Ω–∏–∏ ===")
	t.Logf("–ü–†–û–ë–õ–ï–ú–´:")
	t.Logf("1. –í–æ–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –µ—Å—Ç—å –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ (–ø–æ –∫–∞–¥—Ä–∞–º –∞–Ω–∏–º–∞—Ü–∏–∏), –∞ –Ω–µ –∫–∞–∂–¥—ã–π —Ç–∏–∫")
	t.Logf("2. –í–æ–ª–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã \"—Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è\" –Ω–∞ —Ç—Ä—É–ø –ø—Ä–∏ –ø–æ–µ–¥–∞–Ω–∏–∏")

	// –°–æ–∑–¥–∞—ë–º –º–∏—Ä
	cfg := config.LoadDefaultConfig()
	worldWidth := float32(cfg.World.Size * 32)
	worldHeight := float32(cfg.World.Size * 32)
	world := core.NewWorld(worldWidth, worldHeight, 12345)

	// –°–æ–∑–¥–∞—ë–º terrain
	terrainGen := generator.NewTerrainGenerator(cfg)
	terrain := terrainGen.Generate()

	// –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ
	systemManager := core.NewSystemManager()
	vegetationSystem := simulation.NewVegetationSystem(terrain)
	eatingSystem := simulation.NewEatingSystem()
	behaviorSystem := simulation.NewAnimalBehaviorSystem(vegetationSystem)
	movementSystem := simulation.NewMovementSystem(worldWidth, worldHeight)

	// –í–∞–∂–Ω–æ: –ø–æ—Ä—è–¥–æ–∫ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ
	systemManager.AddSystem(&adapters.BehaviorSystemAdapter{System: behaviorSystem})
	systemManager.AddSystem(&adapters.MovementSystemAdapter{System: movementSystem})
	systemManager.AddSystem(vegetationSystem)
	systemManager.AddSystem(eatingSystem)

	// –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
	animationSystem := animation.NewAnimationSystem()
	animationSystem.RegisterAnimation(animation.AnimIdle, 2, 2.0, true, nil)
	animationSystem.RegisterAnimation(animation.AnimEat, 2, 4.0, true, nil) // 4 FPS = 0.25 —Å–µ–∫ –Ω–∞ –∫–∞–¥—Ä
	animationResolver := animation.NewAnimationResolver()

	// –°–æ–∑–¥–∞—ë–º –≤–æ–ª–∫–∞ –∏ –∑–∞–π—Ü–∞ –±–ª–∏–∑–∫–æ (–¥–ª—è —Ç–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)
	wolfStartX, wolfStartY := float32(200), float32(200)
	rabbitX, rabbitY := float32(200.2), float32(200.2) // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤

	wolf := simulation.CreateAnimal(world, core.TypeWolf, wolfStartX, wolfStartY)
	rabbit := simulation.CreateAnimal(world, core.TypeRabbit, rabbitX, rabbitY)

	// –î–µ–ª–∞–µ–º –≤–æ–ª–∫–∞ –≥–æ–ª–æ–¥–Ω—ã–º
	world.SetSatiation(wolf, core.Satiation{Value: 30.0})

	// –£–±–∏–≤–∞–µ–º –∑–∞–π—Ü–∞ –∏ —Å–æ–∑–¥–∞—ë–º –∏–∑ –Ω–µ–≥–æ —Ç—Ä—É–ø
	world.RemoveHealth(rabbit)
	corpse := core.Corpse{
		NutritionalValue: 50.0, // –ù–µ–±–æ–ª—å—à–∞—è –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏
		MaxNutritional:   50.0,
		DecayTimer:       300.0,
	}
	world.AddCorpse(rabbit, corpse)

	deltaTime := float32(1.0 / 60.0)
	maxTicks := 600 // 10 —Å–µ–∫—É–Ω–¥

	t.Logf("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
	t.Logf("  –ü–æ–∑–∏—Ü–∏—è –≤–æ–ª–∫–∞: (%.1f, %.1f)", wolfStartX, wolfStartY)
	t.Logf("  –ü–æ–∑–∏—Ü–∏—è —Ç—Ä—É–ø–∞: (%.1f, %.1f)", rabbitX, rabbitY)
	t.Logf("  –ì–æ–ª–æ–¥ –≤–æ–ª–∫–∞: 30.0%%")
	t.Logf("  –ü–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä—É–ø–∞: 50.0 –µ–¥–∏–Ω–∏—Ü")

	eatingStarted := false
	var wolfPositionWhenEatingStarted core.Position
	var nutritionGainedCount int
	var lastNutritionGained float32

	for tick := 0; tick < maxTicks; tick++ {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—ã
		world.Update(deltaTime)

		// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
		animalType, _ := world.GetAnimalType(wolf)
		anim, _ := world.GetAnimation(wolf)
		newAnimType := animationResolver.ResolveAnimalAnimationType(world, wolf, animalType)

		if anim.CurrentAnim != int(newAnimType) {
			anim.CurrentAnim = int(newAnimType)
			anim.Frame = 0
			anim.Timer = 0
			anim.Playing = true
			world.SetAnimation(wolf, anim)
		}

		if anim.Playing {
			animComponent := animation.AnimationComponent{
				CurrentAnim: animation.AnimationType(anim.CurrentAnim),
				Frame:       anim.Frame,
				Timer:       anim.Timer,
				Playing:     anim.Playing,
				FacingRight: anim.FacingRight,
			}

			animationSystem.Update(&animComponent, deltaTime)

			anim.Frame = animComponent.Frame
			anim.Timer = animComponent.Timer
			anim.Playing = animComponent.Playing
			anim.FacingRight = animComponent.FacingRight
			world.SetAnimation(wolf, anim)
		}

		systemManager.Update(world, deltaTime)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 —Ç–∏–∫–æ–≤
		if tick%15 == 0 {
			wolfPos, _ := world.GetPosition(wolf)
			wolfHunger, _ := world.GetSatiation(wolf)
			isEating := world.HasComponent(wolf, core.MaskEatingState)
			currentAnimType := animation.AnimationType(anim.CurrentAnim)

			// –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä—É–ø–∞
			var currentNutrition float32
			if corpseData, hasCorpse := world.GetCorpse(rabbit); hasCorpse {
				currentNutrition = corpseData.NutritionalValue
			}

			// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–µ–¥–∞–Ω–∏—è
			var nutritionGained float32
			if eatingState, hasEatingState := world.GetEatingState(wolf); hasEatingState {
				nutritionGained = eatingState.NutritionGained
			}

			t.Logf("%.1fs: pos=(%.1f,%.1f), –≥–æ–ª–æ–¥=%.1f%%, –µ—Å—Ç=%v, –∞–Ω–∏–º–∞—Ü–∏—è=%s, –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å=%.1f, —Å—ä–µ–¥–µ–Ω–æ=%.1f",
				float32(tick)/60.0, wolfPos.X, wolfPos.Y, wolfHunger.Value, isEating,
				currentAnimType.String(), currentNutrition, nutritionGained)

			// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–µ–¥–∞–Ω–∏—è
			if isEating && !eatingStarted {
				eatingStarted = true
				wolfPositionWhenEatingStarted = wolfPos
				t.Logf("‚úÖ –í–æ–ª–∫ –Ω–∞—á–∞–ª –µ—Å—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (%.1f, %.1f)", wolfPos.X, wolfPos.Y)
			}

			// –¢–ï–°–¢ 1: –î–∏—Å–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–µ–¥–∞–Ω–∏–µ - –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–∞–¥—Ä–∞–º
			if eatingStarted && nutritionGained != lastNutritionGained {
				nutritionGainedCount++
				t.Logf("üçñ –ü–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞ #%d: %.1f –µ–¥–∏–Ω–∏—Ü", nutritionGainedCount, nutritionGained-lastNutritionGained)
				lastNutritionGained = nutritionGained
			}

			// –¢–ï–°–¢ 2: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤–æ–ª–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è –í–û –í–†–ï–ú–Ø –ø–æ–µ–¥–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç!)
			if eatingStarted && isEating {
				distance := ((wolfPos.X-wolfPositionWhenEatingStarted.X)*(wolfPos.X-wolfPositionWhenEatingStarted.X) +
					(wolfPos.Y-wolfPositionWhenEatingStarted.Y)*(wolfPos.Y-wolfPositionWhenEatingStarted.Y))
				if distance > 1.0 { // –î–æ–ø—É—Å–∫ 1 –ø–∏–∫—Å–µ–ª—å
					t.Errorf("‚ùå –í–æ–ª–∫ –¥–≤–∏–∂–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –ø–æ–µ–¥–∞–Ω–∏—è! –ë—ã–ª –Ω–∞ (%.1f,%.1f), —Å—Ç–∞–ª –Ω–∞ (%.1f,%.1f)",
						wolfPositionWhenEatingStarted.X, wolfPositionWhenEatingStarted.Y, wolfPos.X, wolfPos.Y)
					return
				}
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–¥–∞–Ω–∏—è
			if eatingStarted && !isEating {
				t.Logf("‚úÖ –ü–æ–µ–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–∞ %.1f —Å–µ–∫—É–Ω–¥–µ", float32(tick)/60.0)
				break
			}
		}
	}

	// –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	t.Logf("\n=== –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")

	if !eatingStarted {
		t.Errorf("‚ùå –í–æ–ª–∫ –Ω–µ –Ω–∞—á–∞–ª –µ—Å—Ç—å –∑–∞ 10 —Å–µ–∫—É–Ω–¥")
		return
	}

	// –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å –ø–æ–µ–¥–∞–Ω–∏—è
	// expectedNutritionGains := 10 // 50 –µ–¥–∏–Ω–∏—Ü / 5 –µ–¥–∏–Ω–∏—Ü –∑–∞ —É–∫—É—Å = 10 —É–∫—É—Å–æ–≤
	if nutritionGainedCount < 5 {
		t.Errorf("‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏: %d (–æ–∂–∏–¥–∞–ª–æ—Å—å >5)", nutritionGainedCount)
	} else if nutritionGainedCount > 15 {
		t.Errorf("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏: %d (–æ–∂–∏–¥–∞–ª–æ—Å—å <15)", nutritionGainedCount)
	} else {
		t.Logf("‚úÖ –î–∏—Å–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–µ–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: %d –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏", nutritionGainedCount)
	}

	// –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–ª–∫ –Ω–µ "—Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª—Å—è" –∫ —Ç—Ä—É–ø—É
	finalWolfPos, _ := world.GetPosition(wolf)
	// –¢–ò–ü–û–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º physics.Pixels –≤ float32 –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
	distanceTraveled := ((finalWolfPos.X-wolfStartX)*(finalWolfPos.X-wolfStartX) +
		(finalWolfPos.Y-wolfStartY)*(finalWolfPos.Y-wolfStartY))

	// –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç—Ä—É–ø–∞ –±—ã–ª–æ ~28 –µ–¥–∏–Ω–∏—Ü, –ø–ª—é—Å –Ω–µ–±–æ–ª—å—à–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–µ–¥–∞–Ω–∏—è
	maxReasonableDistance := float32(40 * 40) // 40 –ø–∏–∫—Å–µ–ª–µ–π –º–∞–∫—Å–∏–º—É–º (—Ä–∞–∑—É–º–Ω–æ –¥–ª—è –ø–æ–¥—Ö–æ–¥–∞ –∫ —Ç—Ä—É–ø—É)

	if distanceTraveled > maxReasonableDistance {
		t.Errorf("‚ùå –í–æ–ª–∫ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è: –æ—Ç (%.1f,%.1f) –¥–æ (%.1f,%.1f), —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ=%.1f",
			wolfStartX, wolfStartY, finalWolfPos.X, finalWolfPos.Y, float32(distanceTraveled))
	} else {
		t.Logf("‚úÖ –í–æ–ª–∫ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è —Ä–∞–∑—É–º–Ω–æ: –æ—Ç (%.1f,%.1f) –¥–æ (%.1f,%.1f), —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ=%.1f –ø–∏–∫—Å–µ–ª–µ–π",
			wolfStartX, wolfStartY, finalWolfPos.X, finalWolfPos.Y, float32(distanceTraveled))
	}

	t.Logf("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤–æ–ª–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã!")
}
