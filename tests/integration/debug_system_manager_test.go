package integration

import (
	"testing"

	"github.com/aiseeq/savanna/config"
	"github.com/aiseeq/savanna/internal/adapters"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/generator"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestSystemManagerExecution –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ SystemManager –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—ã
//
//nolint:revive // function-length: –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
func TestSystemManagerExecution(t *testing.T) {
	t.Parallel()

	t.Logf("=== –¢–ï–°–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø SYSTEM MANAGER ===")

	// –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –º–∏—Ä
	world := core.NewWorld(1600, 1600, 12345)

	// –°–æ–∑–¥–∞—ë–º terrain —Å —Ç—Ä–∞–≤–æ–π
	cfg := config.LoadDefaultConfig()
	cfg.World.Size = 50
	terrainGen := generator.NewTerrainGenerator(cfg)
	terrain := terrainGen.Generate()
	terrain.SetTileType(25, 25, generator.TileGrass)
	terrain.SetGrassAmount(25, 25, 100.0)
	vegetationSystem := simulation.NewVegetationSystem(terrain)

	// –°–æ–∑–¥–∞—ë–º –∑–∞–π—Ü–∞
	rabbit := simulation.CreateAnimal(world, core.TypeRabbit, 816.0, 816.0)
	world.SetHunger(rabbit, core.Hunger{Value: 70.0}) // –ì–æ–ª–æ–¥–Ω—ã–π

	// –°–æ–∑–¥–∞—ë–º —Å–∏—Å—Ç–µ–º—É –∏ –º–µ–Ω–µ–¥–∂–µ—Ä
	systemManager := core.NewSystemManager()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	hungerBefore, _ := world.GetHunger(rabbit)
	eatingStateBefore := world.HasComponent(rabbit, core.MaskEatingState)

	t.Logf("–î–û SystemManager:")
	t.Logf("  –ì–æ–ª–æ–¥: %.1f%%", hungerBefore.Value)
	t.Logf("  EatingState: %v", eatingStateBefore)

	// –¢–ï–°–¢ 1: –í—ã–∑–æ–≤ DeprecatedFeedingSystem –Ω–∞–ø—Ä—è–º—É—é (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
	t.Logf("\n--- –¢–ï–°–¢ 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ DeprecatedFeedingSystem ---")
	deltaTime := float32(1.0 / 60.0)
	feedingSystemAdapter := adapters.NewDeprecatedFeedingSystemAdapter(vegetationSystem)
	feedingSystemAdapter.Update(world, deltaTime)

	hungerAfterDirect, _ := world.GetHunger(rabbit)
	eatingStateAfterDirect := world.HasComponent(rabbit, core.MaskEatingState)

	t.Logf("–ü–û–°–õ–ï –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞:")
	t.Logf("  –ì–æ–ª–æ–¥: %.1f%%", hungerAfterDirect.Value)
	t.Logf("  EatingState: %v", eatingStateAfterDirect)

	if eatingStateAfterDirect {
		t.Logf("‚úÖ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
	} else {
		t.Errorf("‚ùå –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	world.RemoveEatingState(rabbit)
	world.SetHunger(rabbit, core.Hunger{Value: 70.0})

	// –¢–ï–°–¢ 2: –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ FeedingSystemAdapter (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
	t.Logf("\n--- –¢–ï–°–¢ 2: –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ Adapter ---")
	adapter := adapters.NewFeedingSystemAdapter(vegetationSystem)
	adapter.Update(world, deltaTime)

	hungerAfterAdapter, _ := world.GetHunger(rabbit)
	eatingStateAfterAdapter := world.HasComponent(rabbit, core.MaskEatingState)

	t.Logf("–ü–û–°–õ–ï –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ Adapter:")
	t.Logf("  –ì–æ–ª–æ–¥: %.1f%%", hungerAfterAdapter.Value)
	t.Logf("  EatingState: %v", eatingStateAfterAdapter)

	if eatingStateAfterAdapter {
		t.Logf("‚úÖ Adapter —Ä–∞–±–æ—Ç–∞–µ—Ç")
	} else {
		t.Errorf("‚ùå Adapter –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	world.RemoveEatingState(rabbit)
	world.SetHunger(rabbit, core.Hunger{Value: 70.0})

	// –¢–ï–°–¢ 3: –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ SystemManager (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
	t.Logf("\n--- –¢–ï–°–¢ 3: –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ SystemManager ---")
	systemManager.AddSystem(adapter)

	world.Update(deltaTime) // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–Ω–æ
	systemManager.Update(world, deltaTime)

	hungerAfterManager, _ := world.GetHunger(rabbit)
	eatingStateAfterManager := world.HasComponent(rabbit, core.MaskEatingState)

	t.Logf("–ü–û–°–õ–ï –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ SystemManager:")
	t.Logf("  –ì–æ–ª–æ–¥: %.1f%%", hungerAfterManager.Value)
	t.Logf("  EatingState: %v", eatingStateAfterManager)

	if eatingStateAfterManager {
		t.Logf("‚úÖ SystemManager —Ä–∞–±–æ—Ç–∞–µ—Ç")
		t.Logf("üéØ –ü–†–û–ë–õ–ï–ú–ê –ù–ï –í SYSTEM MANAGER")
	} else {
		t.Errorf("‚ùå SystemManager –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
		t.Errorf("üîç –ü–†–û–ë–õ–ï–ú–ê –í SYSTEM MANAGER –∏–ª–∏ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
	}
}
