package integration

import (
	"testing"

	"github.com/aiseeq/savanna/internal/animation"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestRealAnimationBehavior —Ç–µ—Å—Ç –†–ï–ê–õ–¨–ù–û–ì–û –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∫ –≤ –∏–≥—Ä–µ
func TestRealAnimationBehavior(t *testing.T) {
	t.Parallel()
	// –°–æ–∑–¥–∞—ë–º –º–∞–ª–µ–Ω—å–∫–∏–π –º–∏—Ä 3x3 –∫–ª–µ—Ç–∫–∏ (96x96 –ø–∏–∫—Å–µ–ª–µ–π)
	world := core.NewWorld(96, 96, 42)

	// –°–æ–∑–¥–∞—ë–º –¢–û–ß–ù–û —Ç–∞–∫–∏–µ –∂–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∫ –≤ main.go
	combatSystem := simulation.NewCombatSystem()
	animalBehaviorSystem := simulation.NewAnimalBehaviorSystem(nil)
	movementSystem := simulation.NewMovementSystem(96, 96)

	// –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∫ –≤ –∏–≥—Ä–µ
	wolfAnimationSystem := animation.NewAnimationSystem()
	rabbitAnimationSystem := animation.NewAnimationSystem()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¢–û–ß–ù–û –∫–∞–∫ –≤ main.go
	wolfAnimationSystem.RegisterAnimation(animation.AnimIdle, 2, 1.0, true, nil)
	wolfAnimationSystem.RegisterAnimation(animation.AnimWalk, 4, 8.0, true, nil)
	wolfAnimationSystem.RegisterAnimation(animation.AnimRun, 4, 12.0, true, nil)
	wolfAnimationSystem.RegisterAnimation(animation.AnimAttack, 2, 6.0, false, nil) // –ù–ï –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–∞—è!
	wolfAnimationSystem.RegisterAnimation(animation.AnimEat, 2, 2.0, true, nil)

	rabbitAnimationSystem.RegisterAnimation(animation.AnimIdle, 2, 1.0, true, nil)
	rabbitAnimationSystem.RegisterAnimation(animation.AnimWalk, 4, 8.0, true, nil)
	rabbitAnimationSystem.RegisterAnimation(animation.AnimRun, 4, 12.0, true, nil)
	rabbitAnimationSystem.RegisterAnimation(animation.AnimDeathDying, 1, 1.0, false, nil)

	// –°–æ–∑–¥–∞—ë–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –í –¶–ï–ù–¢–†–ï –º–∞–ª–µ–Ω—å–∫–æ–π –∫–∞—Ä—Ç—ã
	rabbit := simulation.CreateRabbit(world, 40, 48) // –¶–µ–Ω—Ç—Ä
	wolf := simulation.CreateWolf(world, 56, 48)     // –†—è–¥–æ–º —Å –∑–∞–π—Ü–µ–º, –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 16 –ø–∏–∫—Å–µ–ª–µ–π

	// –î–µ–ª–∞–µ–º –≤–æ–ª–∫–∞ –û–ß–ï–ù–¨ –≥–æ–ª–æ–¥–Ω—ã–º —á—Ç–æ–±—ã –æ–Ω —Ç–æ—á–Ω–æ –∞—Ç–∞–∫–æ–≤–∞–ª
	world.SetHunger(wolf, core.Hunger{Value: 5.0})

	t.Logf("=== –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø –ê–ù–ò–ú–ê–¶–ò–ò ===")
	t.Logf("–ö–∞—Ä—Ç–∞: 96x96, –∑–∞—è—Ü: (40,48), –≤–æ–ª–∫: (56,48), —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: 16")

	deltaTime := float32(1.0 / 60.0)

	// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –ö–ê–ö –í –†–ï–ê–õ–¨–ù–û–ô –ò–ì–†–ï
	updateAnimations := func() {
		// –û–±—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –∞–Ω–∏–º–∞—Ü–∏–∏
		world.ForEachWith(core.MaskAnimalType|core.MaskAnimation, func(entity core.EntityID) {
			animalType, ok := world.GetAnimalType(entity)
			if !ok {
				return
			}

			anim, hasAnim := world.GetAnimation(entity)
			if !hasAnim {
				return
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–∏—Å—Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
			var newAnimType animation.AnimationType
			var animSystem *animation.AnimationSystem

			switch animalType {
			case core.TypeWolf:
				newAnimType = getWolfAnimationTypeReal(world, entity)
				animSystem = wolfAnimationSystem
			case core.TypeRabbit:
				newAnimType = getRabbitAnimationTypeReal(world, entity)
				animSystem = rabbitAnimationSystem
			default:
				return
			}

			// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é ATTACK –ø–æ–∫–∞ –æ–Ω–∞ –∏–≥—Ä–∞–µ—Ç!
			if anim.CurrentAnim != int(newAnimType) {
				if anim.CurrentAnim == int(animation.AnimAttack) && anim.Playing {
					// –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –¥–æ–ª–∂–Ω–∞ –¥–æ–∏–≥—Ä–∞—Ç—å—Å—è –¥–æ –∫–æ–Ω—Ü–∞
					// –ù–ï –º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é!
					t.Logf("  [ANIM] Entity %d: –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ATTACK –∞–Ω–∏–º–∞—Ü–∏—é (–∫–∞–¥—Ä %d)", entity, anim.Frame)
				} else {
					// –û–±—ã—á–Ω–∞—è —Å–º–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
					t.Logf("  [ANIM] Entity %d: %s -> %s", entity, animation.AnimationType(anim.CurrentAnim).String(), newAnimType.String())
					anim.CurrentAnim = int(newAnimType)
					anim.Frame = 0
					anim.Timer = 0
					anim.Playing = true
					world.SetAnimation(entity, anim)
				}
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
			animComponent := animation.AnimationComponent{
				CurrentAnim: animation.AnimationType(anim.CurrentAnim),
				Frame:       anim.Frame,
				Timer:       anim.Timer,
				Playing:     anim.Playing,
				FacingRight: anim.FacingRight,
			}

			oldFrame := animComponent.Frame
			animSystem.Update(&animComponent, deltaTime)

			// –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤
			if oldFrame != animComponent.Frame {
				t.Logf("  [FRAME] Entity %d (%s): –∫–∞–¥—Ä %d -> %d, –∏–≥—Ä–∞–µ—Ç: %t",
					entity, animalType.String(), oldFrame, animComponent.Frame, animComponent.Playing)
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			anim.Frame = animComponent.Frame
			anim.Timer = animComponent.Timer
			anim.Playing = animComponent.Playing
			world.SetAnimation(entity, anim)
		})
	}

	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
	lastRabbitHealth := int16(50)
	lastWolfHunger := float32(5.0)
	attackFramesSeen := make(map[int]bool)
	damageEvents := 0

	// –°–∏–º—É–ª–∏—Ä—É–µ–º 600 —Ç–∏–∫–æ–≤ (10 —Å–µ–∫—É–Ω–¥)
	for tick := 0; tick < 600; tick++ {
		// –û–±–Ω–æ–≤–ª—è–µ–º –º–∏—Ä
		world.Update(deltaTime)

		// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ö–ê–ö –í –ò–ì–†–ï
		updateAnimations()

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—ã
		animalBehaviorSystem.Update(world, deltaTime)
		movementSystem.Update(world, deltaTime)
		combatSystem.Update(world, deltaTime)

		// –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–æ–ª–∫–∞
		if wolfAnim, hasAnim := world.GetAnimation(wolf); hasAnim {
			if wolfAnim.CurrentAnim == int(animation.AnimAttack) {
				attackFramesSeen[wolfAnim.Frame] = true

				if tick%5 == 0 { // –ö–∞–∂–¥—ã–µ 5 —Ç–∏–∫–æ–≤
					t.Logf("[TICK %3d] –í–û–õ–ö –ê–¢–ê–ö–£–ï–¢: –∫–∞–¥—Ä %d, –∏–≥—Ä–∞–µ—Ç: %t", tick, wolfAnim.Frame, wolfAnim.Playing)
				}
			}
		}

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Ä–æ–Ω
		if rabbitHealth, hasHealth := world.GetHealth(rabbit); hasHealth {
			if rabbitHealth.Current != lastRabbitHealth {
				damageEvents++
				t.Logf("[TICK %3d] ü©∏ –£–†–û–ù #%d: %d -> %d", tick, damageEvents, lastRabbitHealth, rabbitHealth.Current)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º DamageFlash
				if world.HasComponent(rabbit, core.MaskDamageFlash) {
					flash, _ := world.GetDamageFlash(rabbit)
					t.Logf("[TICK %3d] ‚úÖ DamageFlash –∞–∫—Ç–∏–≤–µ–Ω: %.3f —Å–µ–∫", tick, flash.Timer)
				} else {
					t.Logf("[TICK %3d] ‚ùå DamageFlash –ù–ï –ê–ö–¢–ò–í–ï–ù!", tick)
				}

				lastRabbitHealth = rabbitHealth.Current
			}

			// –ï—Å–ª–∏ –∑–∞—è—Ü —É–º–µ—Ä
			if rabbitHealth.Current == 0 && !world.HasComponent(rabbit, core.MaskCorpse) {
				// –ñ–¥—ë–º –æ–¥–∏–Ω —Ç–∏–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä—É–ø–∞
			} else if rabbitHealth.Current == 0 && world.HasComponent(rabbit, core.MaskCorpse) {
				corpse, _ := world.GetCorpse(rabbit)
				t.Logf("[TICK %3d] üíÄ –ó–ê–Ø–¶ –°–¢–ê–õ –¢–†–£–ü–û–ú: –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å %.1f", tick, corpse.NutritionalValue)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–µ–¥–∞–Ω–∏—è
				if world.HasComponent(wolf, core.MaskEatingState) {
					eating, _ := world.GetEatingState(wolf)
					t.Logf("[TICK %3d] üçñ –í–û–õ–ö –ù–ê–ß–ê–õ –ï–°–¢–¨: —Ü–µ–ª—å %d", tick, eating.Target)
				}
				break
			}
		}

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≥–æ–ª–æ–¥ –≤–æ–ª–∫–∞
		if wolfHunger, hasHunger := world.GetHunger(wolf); hasHunger {
			if wolfHunger.Value != lastWolfHunger {
				t.Logf("[TICK %3d] üê∫ –ì–æ–ª–æ–¥ –≤–æ–ª–∫–∞: %.1f%% -> %.1f%%", tick, lastWolfHunger, wolfHunger.Value)
				lastWolfHunger = wolfHunger.Value
			}
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 30 —Ç–∏–∫–æ–≤
		if tick%30 == 0 {
			wolfPos, _ := world.GetPosition(wolf)
			rabbitPos, _ := world.GetPosition(rabbit)
			distance := (wolfPos.X-rabbitPos.X)*(wolfPos.X-rabbitPos.X) + (wolfPos.Y-rabbitPos.Y)*(wolfPos.Y-rabbitPos.Y)
			t.Logf("[TICK %3d] –ü–æ–∑–∏—Ü–∏–∏: –≤–æ–ª–∫(%.1f,%.1f) –∑–∞—è—Ü(%.1f,%.1f) –¥–∏—Å—Ç=%.1f",
				tick, wolfPos.X, wolfPos.Y, rabbitPos.X, rabbitPos.Y, distance)
		}
	}

	// –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
	t.Logf("\n=== –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")
	t.Logf("–ö–∞–¥—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ ATTACK –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã:")
	for frame := 0; frame <= 1; frame++ {
		if attackFramesSeen[frame] {
			t.Logf("  ‚úÖ –ö–∞–¥—Ä %d: –ü–û–ö–ê–ó–ê–ù", frame)
		} else {
			t.Logf("  ‚ùå –ö–∞–¥—Ä %d: –ù–ï –ü–û–ö–ê–ó–ê–ù", frame)
		}
	}

	t.Logf("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π —É—Ä–æ–Ω–∞: %d", damageEvents)

	// –ü–†–û–í–ï–†–ö–ò
	if !attackFramesSeen[0] {
		t.Error("‚ùå –û–®–ò–ë–ö–ê: –ö–∞–¥—Ä 0 –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏ –ù–ï –ü–û–ö–ê–ó–ê–ù!")
	}

	if !attackFramesSeen[1] {
		t.Error("‚ùå –û–®–ò–ë–ö–ê: –ö–∞–¥—Ä 1 –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏ –ù–ï –ü–û–ö–ê–ó–ê–ù!")
	}

	if damageEvents == 0 {
		t.Error("‚ùå –û–®–ò–ë–ö–ê: –£—Ä–æ–Ω –Ω–µ –±—ã–ª –Ω–∞–Ω–µ—Å–µ–Ω!")
	}

	if damageEvents > 0 && (!attackFramesSeen[0] || !attackFramesSeen[1]) {
		t.Error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –£—Ä–æ–Ω –µ—Å—Ç—å, –Ω–æ –∞–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –Ω–µ–ø–æ–ª–Ω–∞—è!")
	}
}

// getWolfAnimationTypeReal –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –≤–æ–ª–∫–∞ –¢–û–ß–ù–û –∫–∞–∫ –≤ main.go
func getWolfAnimationTypeReal(world *core.World, entity core.EntityID) animation.AnimationType {
	// –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ï—Å–ª–∏ –≤–æ–ª–∫ –µ—Å—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ–¥—ã
	if world.HasComponent(entity, core.MaskEatingState) {
		return animation.AnimEat
	}

	// –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ï—Å–ª–∏ –≤–æ–ª–∫ –∞—Ç–∞–∫—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∞—Ç–∞–∫–∏
	if isWolfAttackingInTest(world, entity) {
		return animation.AnimAttack
	}

	// –ü–†–ò–û–†–ò–¢–ï–¢ 3: –î–≤–∏–∂–µ–Ω–∏–µ
	velocity, hasVel := world.GetVelocity(entity)
	if !hasVel {
		return animation.AnimIdle
	}

	speed := velocity.X*velocity.X + velocity.Y*velocity.Y

	if speed < 0.1 {
		return animation.AnimIdle
	} else if speed < 400.0 { // –ü—Ä–∏–º–µ—Ä–Ω–æ —Å–∫–æ—Ä–æ—Å—Ç—å —Ö–æ–¥—å–±—ã (20^2)
		return animation.AnimWalk
	} else {
		return animation.AnimRun
	}
}

// getRabbitAnimationTypeReal –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∑–∞–π—Ü–∞ –¢–û–ß–ù–û –∫–∞–∫ –≤ main.go
func getRabbitAnimationTypeReal(world *core.World, entity core.EntityID) animation.AnimationType {
	// –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞—è—Ü —Ç—Ä—É–ø–æ–º
	if world.HasComponent(entity, core.MaskCorpse) {
		return animation.AnimDeathDying
	}

	// –ü–†–ò–û–†–ò–¢–ï–¢ 2: –î–≤–∏–∂–µ–Ω–∏–µ
	velocity, hasVel := world.GetVelocity(entity)
	if !hasVel {
		return animation.AnimIdle
	}

	speed := velocity.X*velocity.X + velocity.Y*velocity.Y

	if speed < 0.1 {
		return animation.AnimIdle
	} else if speed < 300.0 { // –ü—Ä–∏–º–µ—Ä–Ω–æ —Å–∫–æ—Ä–æ—Å—Ç—å —Ö–æ–¥—å–±—ã –∑–∞–π—Ü–∞
		return animation.AnimWalk
	} else {
		return animation.AnimRun // –ë—ã—Å—Ç—Ä–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
	}
}

// isWolfAttackingInTest –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—Ç–∞–∫—É–µ—Ç –ª–∏ –≤–æ–ª–∫ –¢–û–ß–ù–û –∫–∞–∫ –≤ main.go
func isWolfAttackingInTest(world *core.World, wolf core.EntityID) bool {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ–¥ –≤–æ–ª–∫–∞ - —Å—ã—Ç—ã–π –≤–æ–ª–∫ –Ω–µ –∞—Ç–∞–∫—É–µ—Ç
	hunger, hasHunger := world.GetHunger(wolf)
	if !hasHunger || hunger.Value > 60.0 {
		return false
	}

	pos, hasPos := world.GetPosition(wolf)
	if !hasPos {
		return false
	}

	// –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–∞–π—Ü–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏
	nearestRabbit, foundRabbit := world.FindNearestByType(pos.X, pos.Y, 15.0, core.TypeRabbit)
	if !foundRabbit {
		return false
	}

	// –ù–µ –∞—Ç–∞–∫—É–µ–º —Ç—Ä—É–ø—ã
	if world.HasComponent(nearestRabbit, core.MaskCorpse) {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–ª–∏–∑–∫–æ –∑–∞—è—Ü –¥–ª—è –∞—Ç–∞–∫–∏
	rabbitPos, hasRabbitPos := world.GetPosition(nearestRabbit)
	if !hasRabbitPos {
		return false
	}

	distance := (pos.X-rabbitPos.X)*(pos.X-rabbitPos.X) + (pos.Y-rabbitPos.Y)*(pos.Y-rabbitPos.Y)
	return distance <= 12.0*12.0 // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –∞—Ç–∞–∫–∏ = 12 –ø–∏–∫—Å–µ–ª–µ–π
}
