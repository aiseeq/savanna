package integration

import (
	"testing"

	"github.com/aiseeq/savanna/internal/adapters"
	"github.com/aiseeq/savanna/internal/animation"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestRealGameCombat —Ç–µ—Å—Ç –±–æ—è –≤ —É—Å–ª–æ–≤–∏—è—Ö —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã (—Å –ø–æ–ª–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏)
//
//nolint:gocognit,revive,funlen // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
func TestRealGameCombat(t *testing.T) {
	t.Parallel()
	world := core.NewWorld(1600, 1600, 42) // –ë–æ–ª—å—à–∏–π –º–∏—Ä

	// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–∏—Å—Ç–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ CLAUDE.md
	systemManager := core.NewSystemManager()

	// –°–ù–ê–ß–ê–õ–ê CombatSystem (—Å–æ–∑–¥–∞–µ—Ç AttackState)
	combatSystem := simulation.NewCombatSystem()
	systemManager.AddSystem(combatSystem)

	// –ü–û–¢–û–ú BehaviorSystem (–≤–∏–¥–∏—Ç AttackState –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∞—Ç–∞–∫—É—é—â–∏—Ö)
	animalBehaviorSystem := simulation.NewAnimalBehaviorSystem(nil) // nil vegetation –¥–ª—è —Ç–µ—Å—Ç–∞
	systemManager.AddSystem(&adapters.BehaviorSystemAdapter{System: animalBehaviorSystem})

	// –ü–û–°–õ–ï–î–ù–ò–ú MovementSystem (–¥–≤–∏–∂–µ–Ω–∏–µ)
	movementSystem := simulation.NewMovementSystem(1600, 1600)
	systemManager.AddSystem(&adapters.MovementSystemAdapter{System: movementSystem})

	// –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
	wolfAnimationSystem := animation.NewAnimationSystem()
	wolfAnimationSystem.RegisterAnimation(animation.AnimIdle, 2, 1.0, true, nil)
	wolfAnimationSystem.RegisterAnimation(animation.AnimWalk, 2, 4.0, true, nil)
	wolfAnimationSystem.RegisterAnimation(animation.AnimRun, 2, 8.0, true, nil)
	wolfAnimationSystem.RegisterAnimation(animation.AnimAttack, 2, 6.0, false, nil)
	wolfAnimationSystem.RegisterAnimation(animation.AnimEat, 2, 2.0, true, nil)

	// –°–æ–∑–¥–∞—ë–º –∂–∏–≤–æ—Ç–Ω—ã—Ö —Ä—è–¥–æ–º –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º (–¥–ª—è —Ç–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)
	rabbit := simulation.CreateAnimal(world, core.TypeRabbit, 800, 800)
	wolf := simulation.CreateAnimal(world, core.TypeWolf, 801, 800) // –î–∏—Å—Ç–∞–Ω—Ü–∏—è 1 –ø–∏–∫—Å–µ–ª—å < –∞—Ç–∞–∫–∞ –≤–æ–ª–∫–∞ 15 —Ç–∞–π–ª–æ–≤

	// –î–µ–ª–∞–µ–º –≤–æ–ª–∫–∞ –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã–º
	world.SetSatiation(wolf, core.Satiation{Value: 10.0}) // 10% - –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã–π

	t.Logf("=== –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –ò–ì–†–´ ===")
	t.Logf("–ó–∞—è—Ü: (800, 800), –í–æ–ª–∫: (801, 800), —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: 1 –ø–∏–∫—Å–µ–ª—å")

	initialHealth, _ := world.GetHealth(rabbit)
	initialHunger, _ := world.GetSatiation(wolf)
	t.Logf("–ó–¥–æ—Ä–æ–≤—å–µ –∑–∞–π—Ü–∞: %d, –≥–æ–ª–æ–¥ –≤–æ–ª–∫–∞: %.1f%%", initialHealth.Current, initialHunger.Value)

	deltaTime := float32(1.0 / 60.0)
	attackDetected := false
	damageFlashDetected := false
	deathDetected := false
	eatingDetected := false

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–≥—Ä—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
	for i := 0; i < 600; i++ {
		world.Update(deltaTime)

		// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ
		updateWolfAnimation(world, wolf, wolfAnimationSystem, deltaTime)

		// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
		systemManager.Update(world, deltaTime)

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
		currentHealth, _ := world.GetHealth(rabbit)
		if !attackDetected && currentHealth.Current < initialHealth.Current {
			attackDetected = true
			t.Logf("‚úÖ –¢–∏–∫ %d: –ê–¢–ê–ö–ê –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –ó–¥–æ—Ä–æ–≤—å–µ %d -> %d",
				i, initialHealth.Current, currentHealth.Current)
		}

		if !damageFlashDetected && world.HasComponent(rabbit, core.MaskDamageFlash) {
			damageFlashDetected = true
			flash, _ := world.GetDamageFlash(rabbit)
			t.Logf("‚úÖ –¢–∏–∫ %d: –ë–õ–ò–ù–ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –¢–∞–π–º–µ—Ä %.2f", i, flash.Timer)
		}

		if !deathDetected && world.HasComponent(rabbit, core.MaskCorpse) {
			deathDetected = true
			t.Logf("‚úÖ –¢–∏–∫ %d: –°–ú–ï–†–¢–¨ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –ó–∞—è—Ü –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ —Ç—Ä—É–ø", i)
		}

		if !eatingDetected && world.HasComponent(wolf, core.MaskEatingState) {
			eatingDetected = true
			t.Logf("‚úÖ –¢–∏–∫ %d: –ü–û–ï–î–ê–ù–ò–ï –Ω–∞—á–∞–ª–æ—Å—å!", i)
		}

		// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
		if i%120 == 0 {
			health, _ := world.GetHealth(rabbit)
			hunger, _ := world.GetSatiation(wolf)
			wolfPos, _ := world.GetPosition(wolf)
			rabbitPos, _ := world.GetPosition(rabbit)
			anim, _ := world.GetAnimation(wolf)

			distance := (wolfPos.X-rabbitPos.X)*(wolfPos.X-rabbitPos.X) + (wolfPos.Y-rabbitPos.Y)*(wolfPos.Y-rabbitPos.Y)

			status := "–∂–∏–≤"
			if world.HasComponent(rabbit, core.MaskCorpse) {
				status = "—Ç—Ä—É–ø"
			} else if !world.IsAlive(rabbit) {
				status = "—Å—ä–µ–¥–µ–Ω"
			}

			t.Logf("%.1f—Å: –∑–∞—è—Ü %s (HP %d), –≤–æ–ª–∫ (%.1f,%.1f) –≥–æ–ª–æ–¥ %.1f%%, –∞–Ω–∏–º–∞—Ü–∏—è %s, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è %.1f",
				float32(i)/60.0, status, health.Current, wolfPos.X, wolfPos.Y, hunger.Value,
				animation.AnimationType(anim.CurrentAnim).String(), distance)
		}

		// –ï—Å–ª–∏ —Ç—Ä—É–ø —Å—ä–µ–¥–µ–Ω - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
		if deathDetected && !world.IsAlive(rabbit) {
			finalHunger, _ := world.GetSatiation(wolf)
			t.Logf("üéâ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ó–ê–í–ï–†–®–Å–ù –Ω–∞ —Ç–∏–∫–µ %d (%.1f —Å–µ–∫)", i, float32(i)/60.0)
			t.Logf("–ì–æ–ª–æ–¥ –≤–æ–ª–∫–∞: %.1f%% -> %.1f%%", initialHunger.Value, finalHunger.Value)
			break
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	t.Logf("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
	t.Logf("–ê—Ç–∞–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: %t", attackDetected)
	t.Logf("–ë–ª–∏–Ω–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: %t", damageFlashDetected)
	t.Logf("–°–º–µ—Ä—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: %t", deathDetected)
	t.Logf("–ü–æ–µ–¥–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: %t", eatingDetected)

	if !attackDetected {
		t.Error("‚ùå –ê—Ç–∞–∫–∞ –ù–ï –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ!")
	}
	if !damageFlashDetected {
		t.Error("‚ùå –ë–ª–∏–Ω–∫ —É—Ä–æ–Ω–∞ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ!")
	}
	if !deathDetected {
		t.Error("‚ùå –°–º–µ—Ä—Ç—å –ù–ï –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ!")
	}
	if !eatingDetected {
		t.Error("‚ùå –ü–æ–µ–¥–∞–Ω–∏–µ –ù–ï –Ω–∞—á–∞–ª–æ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ!")
	}
}

// updateWolfAnimation –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –≤–æ–ª–∫–∞ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ
//
//nolint:gocognit,revive // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–æ–ª–∫–∞
func updateWolfAnimation(
	world *core.World, wolf core.EntityID, animSystem *animation.AnimationSystem, deltaTime float32,
) {
	if anim, hasAnim := world.GetAnimation(wolf); hasAnim {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞–∫ –≤ main.go
		var newAnimType animation.AnimationType
		if world.HasComponent(wolf, core.MaskEatingState) {
			newAnimType = animation.AnimEat
		} else if isWolfAttacking(world, wolf) {
			newAnimType = animation.AnimAttack
		} else {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
			velocity, hasVel := world.GetVelocity(wolf)
			if hasVel {
				speed := velocity.X*velocity.X + velocity.Y*velocity.Y
				if speed < 0.1 {
					newAnimType = animation.AnimIdle
				} else if speed < 400.0 {
					newAnimType = animation.AnimWalk
				} else {
					newAnimType = animation.AnimRun
				}
			} else {
				newAnimType = animation.AnimIdle
			}
		}

		// –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë
		if anim.CurrentAnim != int(newAnimType) {
			anim.CurrentAnim = int(newAnimType)
			anim.Frame = 0
			anim.Timer = 0
			anim.Playing = true
			world.SetAnimation(wolf, anim)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≥–ª—è–¥–∞
		if velocity, hasVel := world.GetVelocity(wolf); hasVel {
			if velocity.X > 0.1 {
				anim.FacingRight = true
			} else if velocity.X < -0.1 {
				anim.FacingRight = false
			}
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
		animComponent := animation.AnimationComponent{
			CurrentAnim: animation.AnimationType(anim.CurrentAnim),
			Frame:       anim.Frame,
			Timer:       anim.Timer,
			Playing:     anim.Playing,
			FacingRight: anim.FacingRight,
		}

		animSystem.Update(&animComponent, deltaTime)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		anim.Frame = animComponent.Frame
		anim.Timer = animComponent.Timer
		anim.Playing = animComponent.Playing
		anim.FacingRight = animComponent.FacingRight
		world.SetAnimation(wolf, anim)
	}
}
