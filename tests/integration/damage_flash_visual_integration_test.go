package integration

import (
	"testing"

	"github.com/aiseeq/savanna/internal/animation"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestDamageFlashVisualIntegration - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –±–µ–ª–æ–≥–æ –∫—Ä—É–∂–∫–∞ DamageFlash –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∞—Ç–∞–∫–µ
//
// –°–æ–∑–¥–∞—ë—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏–≥—Ä–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é: –≤–æ–ª–∫ –∞—Ç–∞–∫—É–µ—Ç –∑–∞–π—Ü–∞ –∏ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ DamageFlash —Å–æ–∑–¥–∞—ë—Ç—Å—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å –±–µ–ª—ã–º –∫—Ä—É–∂–∫–æ–º
//
//nolint:gocognit,revive,funlen // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
func TestDamageFlashVisualIntegration(t *testing.T) {
	t.Parallel()

	// –°–æ–∑–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω—É—é –∏–≥—Ä–æ–≤—É—é —Å—Ä–µ–¥—É
	world := core.NewWorld(640, 640, 42)
	combatSystem := simulation.NewCombatSystem()

	// –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
	wolfAnimSystem := animation.NewAnimationSystem()
	rabbitAnimSystem := animation.NewAnimationSystem()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏ –∏ —É—Ä–æ–Ω–∞
	wolfAnimSystem.RegisterAnimation(animation.AnimAttack, 2, 6.0, false, nil)
	wolfAnimSystem.RegisterAnimation(animation.AnimIdle, 2, 1.0, true, nil)
	rabbitAnimSystem.RegisterAnimation(animation.AnimIdle, 2, 1.0, true, nil)

	animManager := animation.NewAnimationManager(wolfAnimSystem, rabbitAnimSystem)

	// –°–æ–∑–¥–∞—ë–º –±–æ–µ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é: –≥–æ–ª–æ–¥–Ω—ã–π –≤–æ–ª–∫ —Ä—è–¥–æ–º —Å –∑–∞–π—Ü–µ–º
	rabbit := simulation.CreateAnimal(world, core.TypeRabbit, 300, 300)
	wolf := simulation.CreateAnimal(world, core.TypeWolf, 305, 300) // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ

	// –î–µ–ª–∞–µ–º –≤–æ–ª–∫–∞ –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã–º –¥–ª—è –∞—Ç–∞–∫–∏
	world.SetSatiation(wolf, core.Satiation{Value: 10.0}) // 10% - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≥–æ–ª–æ–¥

	t.Logf("=== –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ DAMAGEFLASH ===")
	t.Logf("–í–æ–ª–∫ (entity %d) –∞—Ç–∞–∫—É–µ—Ç –∑–∞–π—Ü–∞ (entity %d)", wolf, rabbit)

	deltaTime := float32(1.0 / 60.0)
	damageFlashDetected := false
	attackHappened := false

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ 300 —Ç–∏–∫–æ–≤ (5 —Å–µ–∫—É–Ω–¥) –¥–ª—è –ø–æ–ª–Ω–æ–π –∞—Ç–∞–∫–∏
	for i := 0; i < 300; i++ {
		world.Update(deltaTime)
		combatSystem.Update(world, deltaTime)
		animManager.UpdateAllAnimations(world, deltaTime)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –∞—Ç–∞–∫–∏
		if !attackHappened && world.HasComponent(wolf, core.MaskAttackState) {
			attackState, _ := world.GetAttackState(wolf)
			if attackState.Target == rabbit {
				attackHappened = true
				t.Logf("‚úÖ –¢–∏–∫ %d: –í–æ–ª–∫ –Ω–∞—á–∞–ª –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∑–∞–π—Ü–∞", i)
			}
		}

		// –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ DamageFlash
		if world.HasComponent(rabbit, core.MaskDamageFlash) {
			if !damageFlashDetected {
				damageFlashDetected = true
				flash, _ := world.GetDamageFlash(rabbit)
				t.Logf("üéØ –¢–∏–∫ %d: DamageFlash —Å–æ–∑–¥–∞–Ω!", i)
				t.Logf("   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: Timer=%.3f, Duration=%.3f, Intensity=%.3f",
					flash.Timer, flash.Duration, flash.Intensity)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ DamageFlash –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–µ–ª–æ–≥–æ –∫—Ä—É–∂–∫–∞
				if flash.Intensity <= 0 {
					t.Error("–ë–ê–ì: DamageFlash —Å–æ–∑–¥–∞–Ω —Å –Ω—É–ª–µ–≤–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é")
				}
				if flash.Timer <= 0 {
					t.Error("–ë–ê–ì: DamageFlash —Å–æ–∑–¥–∞–Ω —Å –Ω—É–ª–µ–≤—ã–º —Ç–∞–π–º–µ—Ä–æ–º")
				}
				if flash.Duration <= 0 {
					t.Error("–ë–ê–ì: DamageFlash —Å–æ–∑–¥–∞–Ω —Å –Ω—É–ª–µ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞—è—Ü –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω
				health, hasHealth := world.GetHealth(rabbit)
				if hasHealth && health.Current < health.Max {
					t.Logf("‚úÖ –ó–∞—è—Ü –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω: %d/%d HP", health.Current, health.Max)
				} else {
					t.Error("–ë–ê–ì: DamageFlash —Å–æ–∑–¥–∞–Ω, –Ω–æ –∑–∞—è—Ü –Ω–µ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω")
				}
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DamageFlash –∫–∞–∂–¥—ã–µ 10 —Ç–∏–∫–æ–≤
			if i%10 == 0 {
				flash, _ := world.GetDamageFlash(rabbit)
				t.Logf("   –¢–∏–∫ %d: DamageFlash —Ç–∞–π–º–µ—Ä=%.3f, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å=%.3f",
					i, flash.Timer, flash.Intensity)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
				expectedIntensity := flash.Timer / flash.Duration
				if abs(flash.Intensity-expectedIntensity) > 0.01 {
					t.Errorf("–ë–ê–ì: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å DamageFlash")
					t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å: %.3f, –ø–æ–ª—É—á–µ–Ω–æ: %.3f", expectedIntensity, flash.Intensity)
				}
			}
		} else if damageFlashDetected {
			// DamageFlash –∏—Å—á–µ–∑
			t.Logf("‚úÖ –¢–∏–∫ %d: DamageFlash –∏—Å—á–µ–∑ (–∑–∞–≤–µ—Ä—à–∏–ª—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ)", i)
			break
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
		if i%60 == 0 {
			rabbitHealth, _ := world.GetHealth(rabbit)
			wolfHunger, _ := world.GetSatiation(wolf)
			t.Logf("–°–µ–∫—É–Ω–¥–∞ %d: –ó–∞—è—Ü HP=%d, –≤–æ–ª–∫ –≥–æ–ª–æ–¥=%.1f%%",
				i/60, rabbitHealth.Current, wolfHunger.Value)
		}
	}

	// –§–ò–ù–ê–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò
	if !attackHappened {
		t.Error("–ë–ê–ì: –í–æ–ª–∫ –Ω–µ –∞—Ç–∞–∫–æ–≤–∞–ª –∑–∞–π—Ü–∞ –∑–∞ 5 —Å–µ–∫—É–Ω–¥")
		t.Error("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
		t.Error("1. –í–æ–ª–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ–¥–µ–Ω")
		t.Error("2. –ó–∞—è—Ü —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ")
		t.Error("3. AttackSystem –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
	}

	if !damageFlashDetected {
		t.Error("–ë–ê–ì: DamageFlash –ù–ï –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∞—Ç–∞–∫–µ")
		t.Error("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
		t.Error("1. –£—Ä–æ–Ω –Ω–µ –±—ã–ª –Ω–∞–Ω–µ—Å—ë–Ω")
		t.Error("2. DamageFlash –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ AttackSystem")
		t.Error("3. DamageSystem –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
	} else {
		t.Logf("‚úÖ –£–°–ü–ï–•: DamageFlash –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
		t.Logf("‚úÖ –í GUI –∏–≥—Ä–µ –∑–∞—è—Ü –±—É–¥–µ—Ç –ø–æ–∫—Ä—ã—Ç –±–µ–ª—ã–º –∫—Ä—É–∂–∫–æ–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∑–∞—è—Ü –º–æ–≥ —É–º–µ—Ä–µ—Ç—å –∏–ª–∏ —Å—Ç–∞—Ç—å —Ç—Ä—É–ø–æ–º)
	if world.IsAlive(rabbit) {
		finalRabbitHealth, _ := world.GetHealth(rabbit)
		t.Logf("‚úÖ –ó–∞—è—Ü –≤—ã–∂–∏–ª —Å %d/%d HP", finalRabbitHealth.Current, finalRabbitHealth.Max)
	} else if world.HasComponent(rabbit, core.MaskCorpse) {
		t.Logf("‚úÖ –ó–∞—è—Ü —É–±–∏—Ç –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ —Ç—Ä—É–ø")
	} else {
		t.Logf("‚úÖ –ó–∞—è—Ü –±—ã–ª —É–±–∏—Ç –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –º–∏—Ä–∞")
	}
}
