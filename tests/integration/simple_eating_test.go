package integration

import (
	"testing"

	"github.com/aiseeq/savanna/config"
	"github.com/aiseeq/savanna/internal/animation"
	"github.com/aiseeq/savanna/internal/constants"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/generator"
	"github.com/aiseeq/savanna/internal/simulation"
	"github.com/aiseeq/savanna/tests/common"
)

// TestSimpleEating –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç: 1 –∑–∞—è—Ü –Ω–∞ 1x1 –∫–∞—Ä—Ç–µ –µ—Å—Ç —Ç—Ä–∞–≤—É
//
//nolint:gocognit,revive,funlen // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∑–∞–π—Ü–µ–≤
func TestSimpleEating(t *testing.T) {
	t.Parallel()

	t.Logf("=== –ü–†–û–°–¢–ï–ô–®–ò–ô –¢–ï–°–¢: 1 –∑–∞—è—Ü –µ—Å—Ç –Ω–∞ –∫–∞—Ä—Ç–µ 1x1 ===")

	// –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∏—Ä 1x1 —Ç–∞–π–ª = 32x32 –ø–∏–∫—Å–µ–ª—è
	world := core.NewWorld(32, 32, 12345)

	// –°–æ–∑–¥–∞—ë–º terrain 1x1 —Å 100% —Ç—Ä–∞–≤–æ–π
	cfg := config.LoadDefaultConfig()
	cfg.World.Size = 1 // 1 —Ç–∞–π–ª
	terrainGen := generator.NewTerrainGenerator(cfg)
	terrain := terrainGen.Generate()

	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–Ω–æ–≥–æ —Ç—Ä–∞–≤—ã –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∞–π–ª
	terrain.SetTileType(0, 0, generator.TileGrass)
	terrain.SetGrassAmount(0, 0, 100.0) // –ú–Ω–æ–≥–æ —Ç—Ä–∞–≤—ã

	// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –ù–ê–®–ò–ú terrain
	// –ò –ø–æ–ª—É—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	bundle := common.CreateTestSystemBundleWithTerrain(32, terrain)
	systemManager := bundle.SystemManager
	animationAdapter := bundle.AnimationAdapter

	// –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—É—é vegetation —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–∞–≤–µ –≤ —Ç–µ—Å—Ç–∞—Ö (—Å —Ç–µ–º –∂–µ terrain!)
	vegetationSystem := simulation.NewVegetationSystem(terrain)

	// –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Ñ–∞–π–ª–∞–º–∏
	rabbitAnimSystem := animation.NewAnimationSystem()

	// –ò–º–∏—Ç–∏—Ä—É–µ–º loadRabbitAnimations –∏–∑ main.go —Å –†–ï–ê–õ–¨–ù–û–ô –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤
	t.Logf("\n--- –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ ---")

	rabbitAnimations := []struct {
		name     string
		animType animation.AnimationType
	}{
		{"hare_idle", animation.AnimIdle},
		{"hare_eat", animation.AnimEat},
		{"hare_walk", animation.AnimWalk},
		{"hare_run", animation.AnimRun},
	}

	for _, config := range rabbitAnimations {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
		file1 := "assets/animations/" + config.name + "_1.png"
		file2 := "assets/animations/" + config.name + "_2.png"

		t.Logf("  –ü—Ä–æ–≤–µ—Ä—è–µ–º: %s -> %s", config.name, config.animType.String())
		t.Logf("    –§–∞–π–ª 1: %s", file1)
		t.Logf("    –§–∞–π–ª 2: %s", file2)

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é (—Å –ø—É—Å—Ç—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞)
		rabbitAnimSystem.RegisterAnimation(config.animType, 2, 4.0, true, nil)
		t.Logf("    ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: %s", config.animType.String())
	}

	// –°–æ–∑–¥–∞—ë–º resolver
	animationResolver := animation.NewAnimationResolver()

	// –°–æ–∑–¥–∞—ë–º –∑–∞–π—Ü–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–∞–π–ª–∞
	rabbit := simulation.CreateAnimal(world, core.TypeRabbit, 16, 16) // –¶–µ–Ω—Ç—Ä 32x32 —Ç–∞–π–ª–∞

	// –î–µ–ª–∞–µ–º –∑–∞–π—Ü–∞ –û–ß–ï–ù–¨ –≥–æ–ª–æ–¥–Ω—ã–º —á—Ç–æ–±—ã –æ–Ω —Ç–æ—á–Ω–æ –µ–ª (–º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ 90%)
	world.SetSatiation(rabbit, core.Satiation{Value: 10.0}) // 10% –≥–æ–ª–æ–¥–∞ - –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã–π, —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –µ—Å—Ç—å
	world.SetVelocity(rabbit, core.Velocity{X: 0, Y: 0})    // –°—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ

	t.Logf("\n--- –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---")
	pos, _ := world.GetPosition(rabbit)
	hunger, _ := world.GetSatiation(rabbit)
	grassAmount := vegetationSystem.GetGrassAt(pos.X, pos.Y)

	t.Logf("–ü–æ–∑–∏—Ü–∏—è –∑–∞–π—Ü–∞: (%.1f, %.1f)", pos.X, pos.Y)
	t.Logf("–ì–æ–ª–æ–¥ –∑–∞–π—Ü–∞: %.1f%%", hunger.Value)
	t.Logf("–¢—Ä–∞–≤–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: %.1f –µ–¥–∏–Ω–∏—Ü", grassAmount)

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
	rabbitConfig, _ := world.GetAnimalConfig(rabbit)
	collisionRadiusPixels := constants.TilesToPixels(rabbitConfig.CollisionRadius)
	t.Logf("–†–∞–¥–∏—É—Å –∫–æ–ª–ª–∏–∑–∏–π –∑–∞–π—Ü–∞: %.1f —Ç–∞–π–ª–∞ = %.1f –ø–∏–∫—Å–µ–ª–µ–π", rabbitConfig.CollisionRadius, collisionRadiusPixels)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞–≤—É
	grassX, grassY, foundGrass := vegetationSystem.FindNearestGrass(pos.X, pos.Y, collisionRadiusPixels, 10.0)
	t.Logf("–ü–æ–∏—Å–∫ —Ç—Ä–∞–≤—ã –≤ —Ä–∞–¥–∏—É—Å–µ %.1f: –Ω–∞–π–¥–µ–Ω–æ=%v, –ø–æ–∑–∏—Ü–∏—è=(%.1f, %.1f)", collisionRadiusPixels, foundGrass, grassX, grassY)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –¥–∞–ª—å–Ω–æ—Å—Ç—å—é –∑—Ä–µ–Ω–∏—è (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç GrassSearchSystem)
	rabbitBehavior, _ := world.GetBehavior(rabbit)
	visionRangePixels := constants.TilesToPixels(rabbitBehavior.VisionRange)
	grassX2, grassY2, foundGrass2 := vegetationSystem.FindNearestGrass(pos.X, pos.Y, visionRangePixels, 10.0)
	t.Logf("–ü–æ–∏—Å–∫ —Ç—Ä–∞–≤—ã –≤ —Ä–∞–¥–∏—É—Å–µ –∑—Ä–µ–Ω–∏—è %.1f: –Ω–∞–π–¥–µ–Ω–æ=%v, –ø–æ–∑–∏—Ü–∏—è=(%.1f, %.1f)", visionRangePixels, foundGrass2, grassX2, grassY2)

	deltaTime := float32(1.0 / 60.0)

	t.Logf("\n--- –°–∏–º—É–ª—è—Ü–∏—è –µ–¥—ã ---")

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–∫–æ–≤
	for i := 0; i < 10; i++ {
		t.Logf("\n=== –¢–ò–ö %d ===", i)

		// –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º
		hunger, _ = world.GetSatiation(rabbit)
		vel, _ := world.GetVelocity(rabbit)
		anim, _ := world.GetAnimation(rabbit)
		isEatingBefore := world.HasComponent(rabbit, core.MaskEatingState)
		grassBefore := vegetationSystem.GetGrassAt(pos.X, pos.Y)
		speed := vel.X*vel.X + vel.Y*vel.Y
		animTypeBefore := animation.AnimationType(anim.CurrentAnim)

		t.Logf("–î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
		t.Logf("  –ì–æ–ª–æ–¥: %.1f%%, –¢—Ä–∞–≤–∞: %.1f, –°–∫–æ—Ä–æ—Å—Ç—å: %.2f", hunger.Value, grassBefore, speed)
		t.Logf("  EatingState: %v, –ê–Ω–∏–º–∞—Ü–∏—è: %s (–∫–æ–¥ %d)", isEatingBefore, animTypeBefore.String(), anim.CurrentAnim)

		// –û–ë–ù–û–í–õ–Ø–ï–ú –í–°–ï –°–ò–°–¢–ï–ú–´ –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–Ø–î–ö–ï (–∫–∞–∫ –≤ GUI —Ä–µ–∂–∏–º–µ)
		world.Update(deltaTime)
		// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ê–Ω–∏–º–∞—Ü–∏–∏ –ü–ï–†–ï–î —Å–∏—Å—Ç–µ–º–∞–º–∏!
		animationAdapter.Update(world, deltaTime)
		systemManager.Update(world, deltaTime)

		// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∫ –≤ GUI!
		animalType, _ := world.GetAnimalType(rabbit)
		anim, _ = world.GetAnimation(rabbit)

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ resolver
		newAnimType := animationResolver.ResolveAnimalAnimationType(world, rabbit, animalType)

		// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–∫–∞–∫ –≤ GUI updateAnimationIfNeeded)
		if anim.CurrentAnim != int(newAnimType) {
			// –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é ATTACK
			if anim.CurrentAnim == int(animation.AnimAttack) && anim.Playing {
				t.Logf("  –ù–µ –º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é - Attack –∏–≥—Ä–∞–µ—Ç")
			} else {
				// –û–±—ã—á–Ω–∞—è —Å–º–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
				anim.CurrentAnim = int(newAnimType)
				anim.Frame = 0
				anim.Timer = 0
				anim.Playing = true
				world.SetAnimation(rabbit, anim)
				t.Logf("  üîÑ –°–º–µ–Ω–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—é: %s -> %s", animTypeBefore.String(), newAnimType.String())
			}
		}

		// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º
		hunger, _ = world.GetSatiation(rabbit)
		vel, _ = world.GetVelocity(rabbit)
		anim, _ = world.GetAnimation(rabbit)
		isEatingAfter := world.HasComponent(rabbit, core.MaskEatingState)
		grassAfter := vegetationSystem.GetGrassAt(pos.X, pos.Y)
		speed = vel.X*vel.X + vel.Y*vel.Y
		animTypeAfter := animation.AnimationType(anim.CurrentAnim)

		t.Logf("–ü–û–°–õ–ï —Å–∏—Å—Ç–µ–º:")
		t.Logf("  –ì–æ–ª–æ–¥: %.1f%%, –¢—Ä–∞–≤–∞: %.1f, –°–∫–æ—Ä–æ—Å—Ç—å: %.2f", hunger.Value, grassAfter, speed)
		t.Logf("  EatingState: %v, –ê–Ω–∏–º–∞—Ü–∏—è: %s (–∫–æ–¥ %d)", isEatingAfter, animTypeAfter.String(), anim.CurrentAnim)

		// –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –î–û–õ–ñ–ï–ù –°–ö–ê–ó–ê–¢–¨ RESOLVER
		animalType, _ = world.GetAnimalType(rabbit)
		expectedAnim := animationResolver.ResolveAnimalAnimationType(world, rabbit, animalType)
		t.Logf("  AnimationResolver –æ–∂–∏–¥–∞–µ—Ç: %s", expectedAnim.String())

		// –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò
		if isEatingAfter {
			t.Logf("  ‚úÖ EatingState —Å–æ–∑–¥–∞–Ω - –∑–∞—è—Ü –µ—Å—Ç!")

			if expectedAnim != animation.AnimEat {
				t.Errorf("  ‚ùå –ë–ê–ì –í RESOLVER: –ó–∞—è—Ü –µ—Å—Ç –Ω–æ resolver –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç %s –≤–º–µ—Å—Ç–æ Eat", expectedAnim.String())
			}

			if animTypeAfter != animation.AnimEat {
				t.Errorf("  ‚ùå –ë–ê–ì –í –ê–ù–ò–ú–ê–¶–ò–ò: –ó–∞—è—Ü –µ—Å—Ç (EatingState=true) –Ω–æ –∞–Ω–∏–º–∞—Ü–∏—è %s –≤–º–µ—Å—Ç–æ Eat", animTypeAfter.String())
				t.Errorf("     –ü–†–û–ë–õ–ï–ú–ê: –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å Eat –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è %s", animTypeAfter.String())

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–Ω–∏–º–∞—Ü–∏—è Eat –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
				eatAnim := rabbitAnimSystem.GetAnimation(animation.AnimEat)
				if eatAnim == nil {
					t.Errorf("     –ü–†–ò–ß–ò–ù–ê: AnimEat –ù–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ê!")
				} else {
					t.Logf("     AnimEat –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: %d –∫–∞–¥—Ä–æ–≤, %.1f FPS", eatAnim.Frames, eatAnim.FPS)
				}
				return
			} else {
				t.Logf("  ‚úÖ –ò–î–ï–ê–õ–¨–ù–û: –ó–∞—è—Ü –µ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é Eat!")
				return
			}
		}

		grassConsumed := grassBefore - grassAfter
		if grassConsumed > 0 {
			t.Logf("  –°—ä–µ–¥–µ–Ω–æ —Ç—Ä–∞–≤—ã: %.2f –µ–¥–∏–Ω–∏—Ü", grassConsumed)
		}
	}

	t.Errorf("‚ùå –ó–∞—è—Ü –Ω–µ –Ω–∞—á–∞–ª –µ—Å—Ç—å –∑–∞ 10 —Ç–∏–∫–æ–≤!")
}
