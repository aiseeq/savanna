package integration

import (
	"testing"

	"github.com/aiseeq/savanna/config"
	"github.com/aiseeq/savanna/internal/adapters"
	"github.com/aiseeq/savanna/internal/animation"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/generator"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestAnimationInvestigation –î–ï–¢–ê–õ–¨–ù–û–ï –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π idle –≤–æ –≤—Ä–µ–º—è –µ–¥—ã
//
//nolint:gocognit,revive,funlen // –î–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
func TestAnimationInvestigation(t *testing.T) {
	t.Parallel()

	t.Logf("=== –î–ï–¢–ê–õ–¨–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ê–ù–ò–ú–ê–¶–ò–ï–ô ===")

	// –°–æ–∑–¥–∞—ë–º —Ç–æ—á–Ω—É—é –∫–æ–ø–∏—é GUI –Ω–∞—Å—Ç—Ä–æ–µ–∫
	world := core.NewWorld(1600, 1600, 12345) // 50x50 —Ç–∞–π–ª–æ–≤ –∫–∞–∫ –≤ –∏–≥—Ä–µ

	// –°–æ–∑–¥–∞—ë–º terrain —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ GUI
	cfg := config.LoadDefaultConfig()
	cfg.World.Size = 50
	terrainGen := generator.NewTerrainGenerator(cfg)
	terrain := terrainGen.Generate()

	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–≤—É –≤ —Ü–µ–Ω—Ç—Ä
	centerX, centerY := 25, 25
	t.Logf("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–≤—É –≤ —Ç–∞–π–ª (%d, %d)", centerX, centerY)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–∞–π–ª–∞ –ü–ï–†–ï–î —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ç—Ä–∞–≤—ã
	tileType := terrain.GetTileType(centerX, centerY)
	t.Logf("–¢–∏–ø —Ç–∞–π–ª–∞ (%d, %d): %v", centerX, centerY, tileType)

	terrain.SetTileType(centerX, centerY, generator.TileGrass)
	terrain.SetGrassAmount(centerX, centerY, 100.0)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–∞–≤–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å
	grassAfterSet := terrain.GetGrassAmount(centerX, centerY)
	t.Logf("–¢—Ä–∞–≤–∞ –≤ —Ç–∞–π–ª–µ (%d, %d) –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: %.1f", centerX, centerY, grassAfterSet)

	vegetationSystem := simulation.NewVegetationSystem(terrain)

	// –°–æ–∑–¥–∞—ë–º –í–°–ï —Å–∏—Å—Ç–µ–º—ã —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ GUI main.go
	systemManager := core.NewSystemManager()
	animalBehaviorSystem := simulation.NewAnimalBehaviorSystem(vegetationSystem)
	grassEatingSystem := simulation.NewGrassEatingSystem(vegetationSystem)
	combatSystem := simulation.NewCombatSystem()
	movementSystem := simulation.NewMovementSystem(1600, 1600)

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ –¢–û–ú –ñ–ï –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –≤ GUI
	systemManager.AddSystem(vegetationSystem)
	systemManager.AddSystem(adapters.NewFeedingSystemAdapter(vegetationSystem)) // 1. –°–æ–∑–¥–∞—ë—Ç EatingState
	// 2. –î–∏—Å–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–µ–¥–∞–Ω–∏–µ —Ç—Ä–∞–≤—ã –ø–æ –∫–∞–¥—Ä–∞–º –∞–Ω–∏–º–∞—Ü–∏–∏
	systemManager.AddSystem(grassEatingSystem)
	// 3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç EatingState –∏ –Ω–µ –º–µ—à–∞–µ—Ç –µ–¥–µ
	systemManager.AddSystem(&adapters.BehaviorSystemAdapter{System: animalBehaviorSystem})
	systemManager.AddSystem(&adapters.MovementSystemAdapter{System: movementSystem}) // 4. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –µ–¥—è—â–∏—Ö
	systemManager.AddSystem(combatSystem)                                            // 5. –°–∏—Å—Ç–µ–º–∞ –±–æ—è

	// –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¢–û–ß–ù–û –∫–∞–∫ –≤ GUI
	wolfAnimationSystem := animation.NewAnimationSystem()
	rabbitAnimationSystem := animation.NewAnimationSystem()

	// –ò–º–∏—Ç–∏—Ä—É–µ–º –¢–û–ß–ù–£–Æ –∑–∞–≥—Ä—É–∑–∫—É –∞–Ω–∏–º–∞—Ü–∏–π –∏–∑ GUI loadRabbitAnimations
	t.Logf("\n--- –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π –∑–∞–π—Ü–∞ –∫–∞–∫ –≤ GUI ---")
	rabbitAnimations := []struct {
		name     string
		frames   int
		fps      float32
		loop     bool
		animType animation.AnimationType
	}{
		{"hare_idle", 2, 2.0, true, animation.AnimIdle},
		{"hare_walk", 2, 4.0, true, animation.AnimWalk},
		{"hare_run", 2, 12.0, true, animation.AnimRun},
		{"hare_attack", 2, 5.0, false, animation.AnimAttack},
		{"hare_eat", 2, 4.0, true, animation.AnimEat},
		{"hare_dead", 2, 3.0, false, animation.AnimDeathDying},
	}

	for _, config := range rabbitAnimations {
		rabbitAnimationSystem.RegisterAnimation(config.animType, config.frames, config.fps, config.loop, nil)
		t.Logf("  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: %s (%d –∫–∞–¥—Ä–æ–≤, %.1f FPS, –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–∞—è=%v)",
			config.animType.String(), config.frames, config.fps, config.loop)
	}

	// –°–æ–∑–¥–∞—ë–º resolver —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ GUI
	animationResolver := animation.NewAnimationResolver()

	// –°–æ–∑–¥–∞—ë–º –∑–∞–π—Ü–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–¥–µ –µ—Å—Ç—å —Ç—Ä–∞–≤–∞
	rabbitX, rabbitY := float32(centerX*32+16), float32(centerY*32+16) // –¶–µ–Ω—Ç—Ä —Ç–∞–π–ª–∞
	rabbit := simulation.CreateAnimal(world, core.TypeRabbit, rabbitX, rabbitY)

	// –î–µ–ª–∞–µ–º –∑–∞–π—Ü–∞ –≥–æ–ª–æ–¥–Ω—ã–º —á—Ç–æ–±—ã –æ–Ω —Ç–æ—á–Ω–æ –µ–ª
	world.SetSatiation(rabbit, core.Satiation{Value: 70.0}) // 70% - —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –µ—Å—Ç—å (–ø–æ—Ä–æ–≥ 90%)
	world.SetVelocity(rabbit, core.Velocity{X: 0, Y: 0})

	deltaTime := float32(1.0 / 60.0)

	t.Logf("\n--- –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---")
	pos, _ := world.GetPosition(rabbit)
	satiation, _ := world.GetSatiation(rabbit)
	// –¢–ò–ü–û–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ø–æ–∑–∏—Ü–∏–∏ —É–∂–µ float32
	grassAmount := vegetationSystem.GetGrassAt(pos.X, pos.Y)
	behavior, _ := world.GetBehavior(rabbit)

	t.Logf("–ü–æ–∑–∏—Ü–∏—è –∑–∞–π—Ü–∞: (%.1f, %.1f)", pos.X, pos.Y)
	t.Logf("–°—ã—Ç–æ—Å—Ç—å –∑–∞–π—Ü–∞: %.1f%% (–ø–æ—Ä–æ–≥: %.1f%%)", satiation.Value, behavior.SatiationThreshold)
	t.Logf("–¢—Ä–∞–≤–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: %.1f –µ–¥–∏–Ω–∏—Ü", grassAmount)

	// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¥–µ–±–∞–≥ —Ç–∞–π–ª–∞
	tileX := int(pos.X / 32)
	tileY := int(pos.Y / 32)
	t.Logf("–ó–∞—è—Ü –≤ —Ç–∞–π–ª–µ: (%d, %d), –æ–∂–∏–¥–∞–µ–º (%d, %d)", tileX, tileY, centerX, centerY)
	tileType = terrain.GetTileType(tileX, tileY)
	grassInTile := terrain.GetGrassAmount(tileX, tileY)
	t.Logf("–¢–∏–ø —Ç–∞–π–ª–∞ –∑–∞–π—Ü–∞: %v, —Ç—Ä–∞–≤–∞ –≤ —Ç–∞–π–ª–µ: %.1f", tileType, grassInTile)

	t.Logf("\n--- –ü–û–®–ê–ì–û–í–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø GUI –õ–û–ì–ò–ö–ò ---")

	// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ GUI updateSimulation + updateAnimalAnimations
	for i := 0; i < 20; i++ {
		t.Logf("\n=== –¢–ò–ö %d ===", i)

		// === –≠–¢–ê–ü 1: –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ===
		pos, _ = world.GetPosition(rabbit)
		satiation, _ = world.GetSatiation(rabbit)
		anim, _ := world.GetAnimation(rabbit)
		var vel core.Velocity
		isEatingBefore := world.HasComponent(rabbit, core.MaskEatingState)
		// –¢–ò–ü–û–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ø–æ–∑–∏—Ü–∏–∏ —É–∂–µ float32
		grassBefore := vegetationSystem.GetGrassAt(pos.X, pos.Y)
		animTypeBefore := animation.AnimationType(anim.CurrentAnim)

		// –î–ï–ë–ê–ì: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∞–π–ª–∞
		tileX := int(pos.X / 32)
		tileY := int(pos.Y / 32)
		grassInTile := terrain.GetGrassAmount(tileX, tileY)

		t.Logf("–î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
		t.Logf("  –ü–æ–∑–∏—Ü–∏—è: (%.1f, %.1f), –¢–∞–π–ª: (%d, %d)", pos.X, pos.Y, tileX, tileY)
		t.Logf("  –°—ã—Ç–æ—Å—Ç—å: %.1f%% (–ø–æ—Ä–æ–≥ %.1f%%), –¢—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ VegetationSystem: %.1f, –¢—Ä–∞–≤–∞ –≤ terrain —Ç–∞–π–ª–µ: %.1f",
			satiation.Value, simulation.RabbitSatiationThreshold, grassBefore, grassInTile)
		t.Logf("  EatingState: %v, –ê–Ω–∏–º–∞—Ü–∏—è: %s (–∫–æ–¥ %d, –∫–∞–¥—Ä %d)",
			isEatingBefore, animTypeBefore.String(), anim.CurrentAnim, anim.Frame)

		// === –≠–¢–ê–ü 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏—Ä–∞ –∏ —Å–∏—Å—Ç–µ–º (–∫–∞–∫ –≤ GUI updateSimulation) ===
		world.Update(deltaTime)
		systemManager.Update(world, deltaTime)

		// === –≠–¢–ê–ü 3: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï —Å–∏—Å—Ç–µ–º ===
		satiation, _ = world.GetSatiation(rabbit)
		vel, _ = world.GetVelocity(rabbit)
		anim, _ = world.GetAnimation(rabbit)
		isEatingAfter := world.HasComponent(rabbit, core.MaskEatingState)
		// –¢–ò–ü–û–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º physics.Pixels –≤ float32
		grassAfter := vegetationSystem.GetGrassAt(pos.X, pos.Y)
		speed := vel.X*vel.X + vel.Y*vel.Y
		animTypeAfterSystems := animation.AnimationType(anim.CurrentAnim)

		t.Logf("–ü–û–°–õ–ï —Å–∏—Å—Ç–µ–º:")
		t.Logf("  –°—ã—Ç–æ—Å—Ç—å: %.1f%%, –¢—Ä–∞–≤–∞: %.1f, –°–∫–æ—Ä–æ—Å—Ç—å: %.2f", satiation.Value, grassAfter, speed)
		t.Logf("  EatingState: %v, –ê–Ω–∏–º–∞—Ü–∏—è: %s (–∫–æ–¥ %d, –∫–∞–¥—Ä %d)",
			isEatingAfter, animTypeAfterSystems.String(), anim.CurrentAnim, anim.Frame)

		// === –≠–¢–ê–ü 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π (–∫–∞–∫ –≤ GUI updateAnimalAnimations) ===

		// 4.1 –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç resolver
		animalType, _ := world.GetAnimalType(rabbit)
		expectedAnim := animationResolver.ResolveAnimalAnimationType(world, rabbit, animalType)
		t.Logf("  AnimationResolver –æ–∂–∏–¥–∞–µ—Ç: %s", expectedAnim.String())

		// 4.2 –ò–º–∏—Ç–∏—Ä—É–µ–º getAnimationContext
		var animSystem *animation.AnimationSystem
		switch animalType {
		case core.TypeRabbit:
			animSystem = rabbitAnimationSystem
		case core.TypeWolf:
			animSystem = wolfAnimationSystem
		}

		if animSystem == nil {
			t.Errorf("  ‚ùå AnimationSystem –ù–ï –ù–ê–ô–î–ï–ù–ê –¥–ª—è —Ç–∏–ø–∞ %v", animalType)
			continue
		}

		// 4.3 –ò–º–∏—Ç–∏—Ä—É–µ–º updateAnimationIfNeeded
		newAnimType := expectedAnim
		if anim.CurrentAnim != int(newAnimType) {
			// –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é ATTACK
			if anim.CurrentAnim == int(animation.AnimAttack) && anim.Playing {
				t.Logf("  –ù–µ –º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é - Attack –∏–≥—Ä–∞–µ—Ç")
			} else {
				// –û–±—ã—á–Ω–∞—è —Å–º–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
				oldAnimType := animation.AnimationType(anim.CurrentAnim)
				anim.CurrentAnim = int(newAnimType)
				anim.Frame = 0
				anim.Timer = 0
				anim.Playing = true
				world.SetAnimation(rabbit, anim)
				t.Logf("  üîÑ –°–ú–ï–ù–ò–õ–ò –ê–ù–ò–ú–ê–¶–ò–Æ: %s -> %s", oldAnimType.String(), newAnimType.String())
			}
		} else {
			t.Logf("  –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: %s", newAnimType.String())
		}

		// 4.4 –ò–º–∏—Ç–∏—Ä—É–µ–º updateAnimationDirection
		if vel, hasVel := world.GetVelocity(rabbit); hasVel {
			if vel.X > 0.1 {
				anim.FacingRight = true
			} else if vel.X < -0.1 {
				anim.FacingRight = false
			}
		}

		// 4.5 –ò–º–∏—Ç–∏—Ä—É–µ–º processAnimationUpdate
		animComponent := animation.AnimationComponent{
			CurrentAnim: animation.AnimationType(anim.CurrentAnim),
			Frame:       anim.Frame,
			Timer:       anim.Timer,
			Playing:     anim.Playing,
			FacingRight: anim.FacingRight,
		}

		animSystem.Update(&animComponent, deltaTime)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		anim.Frame = animComponent.Frame
		anim.Timer = animComponent.Timer
		anim.Playing = animComponent.Playing
		anim.FacingRight = animComponent.FacingRight
		world.SetAnimation(rabbit, anim)

		// === –≠–¢–ê–ü 5: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
		anim, _ = world.GetAnimation(rabbit)
		animTypeFinal := animation.AnimationType(anim.CurrentAnim)

		t.Logf("–§–ò–ù–ê–õ–¨–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
		t.Logf("  –ê–Ω–∏–º–∞—Ü–∏—è: %s (–∫–æ–¥ %d, –∫–∞–¥—Ä %d, —Ç–∞–π–º–µ—Ä %.2f, –∏–≥—Ä–∞–µ—Ç %v)",
			animTypeFinal.String(), anim.CurrentAnim, anim.Frame, anim.Timer, anim.Playing)

		// === –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò ===
		if isEatingAfter {
			if animTypeFinal != animation.AnimEat {
				t.Errorf("  ‚ùå –ë–ê–ì –û–ë–ù–ê–†–£–ñ–ï–ù: –ó–∞—è—Ü –µ—Å—Ç (EatingState=true) –Ω–æ –∞–Ω–∏–º–∞—Ü–∏—è %s –≤–º–µ—Å—Ç–æ Eat",
					animTypeFinal.String())
				t.Errorf("    Resolver –æ–∂–∏–¥–∞–µ—Ç: %s", expectedAnim.String())
				t.Errorf("    –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–∏—Å—Ç–µ–º: %s", animTypeAfterSystems.String())
				t.Errorf("    –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è: %s", animTypeFinal.String())

				// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
				eatAnim := rabbitAnimationSystem.GetAnimation(animation.AnimEat)
				if eatAnim == nil {
					t.Errorf("    –ü–†–ò–ß–ò–ù–ê: AnimEat –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
				} else {
					t.Logf("    AnimEat –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: %d –∫–∞–¥—Ä–æ–≤, %.1f FPS", eatAnim.Frames, eatAnim.FPS)
				}
				return
			} else {
				t.Logf("  ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ó–∞—è—Ü –µ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é Eat")
				return
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
		grassConsumed := grassBefore - grassAfter
		if grassConsumed > 0 {
			t.Logf("  –°—ä–µ–¥–µ–Ω–æ —Ç—Ä–∞–≤—ã: %.3f –µ–¥–∏–Ω–∏—Ü", grassConsumed)
		}
	}

	t.Errorf("‚ùå –ó–∞—è—Ü –Ω–µ –Ω–∞—á–∞–ª –µ—Å—Ç—å –∑–∞ 20 —Ç–∏–∫–æ–≤")
}
