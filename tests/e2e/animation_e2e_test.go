package e2e

import (
	"testing"

	"github.com/hajimehoshi/ebiten/v2"

	"github.com/aiseeq/savanna/internal/adapters"
	"github.com/aiseeq/savanna/internal/animation"
	"github.com/aiseeq/savanna/internal/core"
	"github.com/aiseeq/savanna/internal/simulation"
)

// TestAnimationE2E –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π E2E —Ç–µ—Å—Ç –∞–Ω–∏–º–∞—Ü–∏–π –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞
func TestAnimationE2E(t *testing.T) {
	t.Parallel()
	t.Logf("=== E2E –¢–ï–°–¢: –ê–ù–ò–ú–ê–¶–ò–ò –ö–ê–ö –í –†–ï–ê–õ–¨–ù–û–ô –ò–ì–†–ï ===")

	// –°–æ–∑–¥–∞—ë–º –º–∏—Ä –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞
	world := core.NewWorld(320, 320, 42) // 10x10 —Ç–∞–π–ª–æ–≤ –ø–æ 32 –ø–∏–∫—Å–µ–ª—è

	// –°–æ–∑–¥–∞—ë–º –¢–û–ß–ù–û —Ç–∞–∫–∏–µ –∂–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∫ –≤ main.go
	systemManager := core.NewSystemManager()
	combatSystem := simulation.NewCombatSystem()
	animalBehaviorSystem := simulation.NewAnimalBehaviorSystem(nil) // –±–µ–∑ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	movementSystem := simulation.NewMovementSystem(320, 320)

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –≤ main.go
	systemManager.AddSystem(&adapters.BehaviorSystemAdapter{System: animalBehaviorSystem})
	systemManager.AddSystem(&adapters.MovementSystemAdapter{System: movementSystem})
	systemManager.AddSystem(combatSystem)

	// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∫ –≤ GUI
	wolfAnimationSystem := animation.NewAnimationSystem()
	rabbitAnimationSystem := animation.NewAnimationSystem()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¢–û–ß–ù–û –∫–∞–∫ –≤ main.go
	loadAnimationsForE2E(wolfAnimationSystem, rabbitAnimationSystem)

	// –°–æ–∑–¥–∞—ë–º off-screen –±—É—Ñ–µ—Ä –¥–ª—è "–æ—Ç—Ä–∏—Å–æ–≤–∫–∏"
	offscreenImage := ebiten.NewImage(320, 320)

	// –°–æ–∑–¥–∞—ë–º –∂–∏–≤–æ—Ç–Ω—ã—Ö —Ä—è–¥–æ–º –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
	rabbit := simulation.CreateRabbit(world, 160, 160) // –¶–µ–Ω—Ç—Ä
	wolf := simulation.CreateWolf(world, 164, 160)     // –†—è–¥–æ–º —Å –∑–∞–π—Ü–µ–º (4 –ø–∏–∫—Å–µ–ª—è)

	// –î–µ–ª–∞–µ–º –≤–æ–ª–∫–∞ –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã–º
	world.SetHunger(wolf, core.Hunger{Value: 5.0})

	t.Logf("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
	rabbitHealth, _ := world.GetHealth(rabbit)
	wolfHunger, _ := world.GetHunger(wolf)
	t.Logf("  –ó–∞—è—Ü: –∑–¥–æ—Ä–æ–≤—å–µ %d, –ø–æ–∑–∏—Ü–∏—è (160,160)", rabbitHealth.Current)
	t.Logf("  –í–æ–ª–∫: –≥–æ–ª–æ–¥ %.1f%%, –ø–æ–∑–∏—Ü–∏—è (164,160)", wolfHunger.Value)

	// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –ö–ê–ö –í –†–ï–ê–õ–¨–ù–û–ô –ò–ì–†–ï (main.go)
	updateAnimalAnimations := func() {
		world.ForEachWith(core.MaskAnimalType|core.MaskAnimation, func(entity core.EntityID) {
			animalType, ok := world.GetAnimalType(entity)
			if !ok {
				return
			}

			anim, hasAnim := world.GetAnimation(entity)
			if !hasAnim {
				return
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–∏—Å—Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
			var newAnimType animation.AnimationType
			var animSystem *animation.AnimationSystem

			switch animalType {
			case core.TypeWolf:
				newAnimType = getWolfAnimationTypeForE2E(world, entity)
				animSystem = wolfAnimationSystem
			case core.TypeRabbit:
				newAnimType = getRabbitAnimationTypeForE2E(world, entity)
				animSystem = rabbitAnimationSystem
			default:
				return
			}

			// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é ATTACK –ø–æ–∫–∞ –æ–Ω–∞ –∏–≥—Ä–∞–µ—Ç!
			oldAnimType := animation.AnimationType(anim.CurrentAnim)
			if anim.CurrentAnim != int(newAnimType) {
				if anim.CurrentAnim == int(animation.AnimAttack) && anim.Playing {
					t.Logf("    [ANIM] Entity %d: –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ATTACK –∞–Ω–∏–º–∞—Ü–∏—é (–∫–∞–¥—Ä %d)", entity, anim.Frame)
				} else {
					t.Logf("    [ANIM] Entity %d (%s): %s -> %s", entity, animalType.String(), oldAnimType.String(), newAnimType.String())
					anim.CurrentAnim = int(newAnimType)
					anim.Frame = 0
					anim.Timer = 0
					anim.Playing = true
					world.SetAnimation(entity, anim)
				}
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
			animComponent := animation.AnimationComponent{
				CurrentAnim: animation.AnimationType(anim.CurrentAnim),
				Frame:       anim.Frame,
				Timer:       anim.Timer,
				Playing:     anim.Playing,
				FacingRight: anim.FacingRight,
			}

			oldFrame := animComponent.Frame
			oldPlaying := animComponent.Playing

			animSystem.Update(&animComponent, 1.0/60.0)

			// –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤
			if oldFrame != animComponent.Frame || oldPlaying != animComponent.Playing {
				t.Logf("    [FRAME] Entity %d (%s): –∫–∞–¥—Ä %d->%d, –∏–≥—Ä–∞–µ—Ç %t->%t",
					entity, animalType.String(), oldFrame, animComponent.Frame, oldPlaying, animComponent.Playing)
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			anim.Frame = animComponent.Frame
			anim.Timer = animComponent.Timer
			anim.Playing = animComponent.Playing
			world.SetAnimation(entity, anim)
		})
	}

	// –§—É–Ω–∫—Ü–∏—è "–æ—Ç—Ä–∏—Å–æ–≤–∫–∏" –≤ off-screen –±—É—Ñ–µ—Ä (–∏–º–∏—Ç–∞—Ü–∏—è GUI)
	renderFrame := func() {
		offscreenImage.Clear()

		// –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∫ –≤ GUI
		world.ForEachWith(core.MaskAnimalType|core.MaskAnimation, func(entity core.EntityID) {
			animalType, _ := world.GetAnimalType(entity)
			anim, hasAnim := world.GetAnimation(entity)
			if !hasAnim {
				return
			}

			animComponent := animation.AnimationComponent{
				CurrentAnim: animation.AnimationType(anim.CurrentAnim),
				Frame:       anim.Frame,
				Timer:       anim.Timer,
				Playing:     anim.Playing,
				FacingRight: anim.FacingRight,
			}

			// –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä –∫–∞–∫ –≤ GUI
			var frameImg *ebiten.Image
			switch animalType {
			case core.TypeWolf:
				frameImg = wolfAnimationSystem.GetFrameImage(&animComponent)
			case core.TypeRabbit:
				frameImg = rabbitAnimationSystem.GetFrameImage(&animComponent)
			}

			// frameImg –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
			_ = frameImg
		})
	}

	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
	lastRabbitHealth := rabbitHealth.Current
	attackFramesSeen := make(map[int]bool)
	damageEvents := 0

	// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª E2E (–∏–º–∏—Ç–∞—Ü–∏—è Update() –∏–∑ main.go)
	deltaTime := float32(1.0 / 60.0)

	for tick := 0; tick < 300; tick++ { // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
		// –û–±–Ω–æ–≤–ª—è–µ–º –º–∏—Ä –¢–û–ß–ù–û –∫–∞–∫ –≤ GUI
		world.Update(deltaTime)
		systemManager.Update(world, deltaTime)

		// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¢–û–ß–ù–û –∫–∞–∫ –≤ GUI
		updateAnimalAnimations()

		// "–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º" –∫–∞–¥—Ä –¢–û–ß–ù–û –∫–∞–∫ –≤ GUI
		renderFrame()

		// –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–æ–ª–∫–∞
		if wolfAnim, hasAnim := world.GetAnimation(wolf); hasAnim {
			if wolfAnim.CurrentAnim == int(animation.AnimAttack) {
				attackFramesSeen[wolfAnim.Frame] = true

				if tick%5 == 0 { // –ö–∞–∂–¥—ã–µ 5 —Ç–∏–∫–æ–≤
					t.Logf("[TICK %3d] üê∫ –í–û–õ–ö –ê–¢–ê–ö–£–ï–¢: –∫–∞–¥—Ä %d, –∏–≥—Ä–∞–µ—Ç: %t, —Ç–∞–π–º–µ—Ä: %.3f",
						tick, wolfAnim.Frame, wolfAnim.Playing, wolfAnim.Timer)
				}
			}
		}

		// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Ä–æ–Ω
		currentRabbitHealth, _ := world.GetHealth(rabbit)
		if currentRabbitHealth.Current != lastRabbitHealth {
			damageEvents++
			t.Logf("[TICK %3d] ü©∏ –£–†–û–ù #%d: %d -> %d", tick, damageEvents, lastRabbitHealth, currentRabbitHealth.Current)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º DamageFlash
			if world.HasComponent(rabbit, core.MaskDamageFlash) {
				flash, _ := world.GetDamageFlash(rabbit)
				t.Logf("[TICK %3d]   ‚ú® DamageFlash: %.3f —Å–µ–∫", tick, flash.Timer)
			} else {
				t.Logf("[TICK %3d]   ‚ùå DamageFlash –ù–ï –∞–∫—Ç–∏–≤–µ–Ω!", tick)
			}

			lastRabbitHealth = currentRabbitHealth.Current
		}

		// –ï—Å–ª–∏ –∑–∞—è—Ü —É–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä—É–ø
		if currentRabbitHealth.Current == 0 {
			if world.HasComponent(rabbit, core.MaskCorpse) {
				corpse, _ := world.GetCorpse(rabbit)
				t.Logf("[TICK %3d] ‚ö∞Ô∏è –ó–ê–Ø–¶ –°–¢–ê–õ –¢–†–£–ü–û–ú: –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å %.1f", tick, corpse.NutritionalValue)

				if world.HasComponent(wolf, core.MaskEatingState) {
					t.Logf("[TICK %3d] üçΩÔ∏è –í–û–õ–ö –ù–ê–ß–ê–õ –ï–°–¢–¨", tick)
				}
				break
			}
		}

		// –ï—Å–ª–∏ –∑–∞—è—Ü –∏—Å—á–µ–∑ (—Å—ä–µ–¥–µ–Ω)
		if !world.IsAlive(rabbit) {
			t.Logf("[TICK %3d] üéâ –ó–ê–Ø–¶ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ß–ï–ó (—Å—ä–µ–¥–µ–Ω)", tick)
			break
		}
	}

	// –ê–ù–ê–õ–ò–ó E2E –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
	t.Logf("\n=== –ê–ù–ê–õ–ò–ó E2E –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
	frame0Seen := attackFramesSeen[0]
	frame1Seen := attackFramesSeen[1]

	t.Logf("–ö–∞–¥—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ ATTACK:")
	if frame0Seen {
		t.Logf("  ‚úÖ –ö–∞–¥—Ä 0 (–∑–∞–º–∞—Ö): –ü–û–ö–ê–ó–ê–ù")
	} else {
		t.Errorf("  ‚ùå –ö–∞–¥—Ä 0 (–∑–∞–º–∞—Ö): –ù–ï –ü–û–ö–ê–ó–ê–ù")
	}

	if frame1Seen {
		t.Logf("  ‚úÖ –ö–∞–¥—Ä 1 (—É–¥–∞—Ä): –ü–û–ö–ê–ó–ê–ù")
	} else {
		t.Errorf("  ‚ùå –ö–∞–¥—Ä 1 (—É–¥–∞—Ä): –ù–ï –ü–û–ö–ê–ó–ê–ù")
	}

	t.Logf("–°–æ–±—ã—Ç–∏—è —É—Ä–æ–Ω–∞: %d", damageEvents)
	if damageEvents == 0 {
		t.Errorf("  ‚ùå –£—Ä–æ–Ω –ù–ï –±—ã–ª –Ω–∞–Ω–µ—Å–µ–Ω!")
	} else {
		t.Logf("  ‚úÖ –£—Ä–æ–Ω –±—ã–ª –Ω–∞–Ω–µ—Å–µ–Ω %d —Ä–∞–∑(–∞)", damageEvents)
	}

	// –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
	finalRabbitHealth, _ := world.GetHealth(rabbit)
	finalWolfHunger, _ := world.GetHunger(wolf)

	t.Logf("–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
	t.Logf("  –ó–∞—è—Ü: –∑–¥–æ—Ä–æ–≤—å–µ %d", finalRabbitHealth.Current)
	t.Logf("  –í–æ–ª–∫: –≥–æ–ª–æ–¥ %.1f%%", finalWolfHunger.Value)

	// –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï E2E –ü–†–û–í–ï–†–ö–ò
	if !frame0Seen || !frame1Seen {
		t.Error("‚ùå E2E –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –Ω–µ–ø–æ–ª–Ω–∞—è - –ù–ï 2 –∫–∞–¥—Ä–∞!")
	}

	if damageEvents == 0 {
		t.Error("‚ùå E2E –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –£—Ä–æ–Ω –Ω–µ –±—ã–ª –Ω–∞–Ω–µ—Å–µ–Ω!")
	}

	if finalRabbitHealth.Current > 0 && !world.HasComponent(rabbit, core.MaskCorpse) {
		t.Error("‚ùå E2E –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ó–∞—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ä—Ç–≤ –∏–ª–∏ —Å—Ç–∞—Ç—å —Ç—Ä—É–ø–æ–º!")
	}

	t.Logf("\nüéØ E2E —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∏–ª –†–ï–ê–õ–¨–ù–û–ï –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –∫–∞–∫ –≤ GUI –∏–≥—Ä–µ")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

func getWolfAnimationTypeForE2E(world *core.World, entity core.EntityID) animation.AnimationType {
	if world.HasComponent(entity, core.MaskEatingState) {
		return animation.AnimEat
	}

	if isWolfAttackingForE2E(world, entity) {
		return animation.AnimAttack
	}

	velocity, hasVel := world.GetVelocity(entity)
	if !hasVel {
		return animation.AnimIdle
	}

	speed := velocity.X*velocity.X + velocity.Y*velocity.Y
	if speed < 0.1 {
		return animation.AnimIdle
	} else if speed < 400.0 {
		return animation.AnimWalk
	} else {
		return animation.AnimRun
	}
}

func getRabbitAnimationTypeForE2E(world *core.World, entity core.EntityID) animation.AnimationType {
	if world.HasComponent(entity, core.MaskCorpse) {
		return animation.AnimDeathDying
	}

	velocity, hasVel := world.GetVelocity(entity)
	if !hasVel {
		return animation.AnimIdle
	}

	speed := velocity.X*velocity.X + velocity.Y*velocity.Y
	if speed < 0.1 {
		return animation.AnimIdle
	} else if speed < 300.0 {
		return animation.AnimWalk
	} else {
		return animation.AnimRun
	}
}

func isWolfAttackingForE2E(world *core.World, wolf core.EntityID) bool {
	hunger, hasHunger := world.GetHunger(wolf)
	if !hasHunger || hunger.Value > 60.0 {
		return false
	}

	pos, hasPos := world.GetPosition(wolf)
	if !hasPos {
		return false
	}

	nearestRabbit, foundRabbit := world.FindNearestByType(pos.X, pos.Y, 15.0, core.TypeRabbit)
	if !foundRabbit {
		return false
	}

	if world.HasComponent(nearestRabbit, core.MaskCorpse) {
		return false
	}

	rabbitPos, hasRabbitPos := world.GetPosition(nearestRabbit)
	if !hasRabbitPos {
		return false
	}

	distance := (pos.X-rabbitPos.X)*(pos.X-rabbitPos.X) + (pos.Y-rabbitPos.Y)*(pos.Y-rabbitPos.Y)
	return distance <= 12.0*12.0
}

func loadAnimationsForE2E(wolfAnimSystem, rabbitAnimSystem *animation.AnimationSystem) {
	// –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—ã–µ —Å–ø—Ä–∞–π—Ç—à–∏—Ç—ã (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –≤–∞–∂–Ω–æ –¥–ª—è E2E)
	emptySheet := ebiten.NewImage(128, 64)

	// –í–æ–ª–∫ - –¢–û–ß–ù–û –∫–∞–∫ –≤ main.go
	wolfAnimSystem.RegisterAnimation(animation.AnimIdle, 2, 1.0, true, emptySheet)
	wolfAnimSystem.RegisterAnimation(animation.AnimWalk, 4, 8.0, true, emptySheet)
	wolfAnimSystem.RegisterAnimation(animation.AnimRun, 4, 12.0, true, emptySheet)
	wolfAnimSystem.RegisterAnimation(animation.AnimAttack, 2, 6.0, false, emptySheet) // –ù–ï –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–∞—è!
	wolfAnimSystem.RegisterAnimation(animation.AnimEat, 2, 2.0, true, emptySheet)

	// –ó–∞—è—Ü - –¢–û–ß–ù–û –∫–∞–∫ –≤ main.go
	rabbitAnimSystem.RegisterAnimation(animation.AnimIdle, 2, 1.0, true, emptySheet)
	rabbitAnimSystem.RegisterAnimation(animation.AnimWalk, 4, 8.0, true, emptySheet)
	rabbitAnimSystem.RegisterAnimation(animation.AnimRun, 4, 12.0, true, emptySheet)
	rabbitAnimSystem.RegisterAnimation(animation.AnimDeathDying, 1, 1.0, false, emptySheet)
}
