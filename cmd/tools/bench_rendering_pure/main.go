package main

import (
	"fmt"
	"image/color"
	"runtime"
	"time"
)

// –ë–µ–Ω—á–º–∞—Ä–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±–µ–∑ GUI

const (
	TileWidth  = 32
	TileHeight = 16
)

// –≠–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
func oldDiamondAlgorithm(x, y, zoom float32, col color.RGBA) int {
	halfWidth := float32(TileWidth) * zoom / 2
	halfHeight := float32(TileHeight) * zoom / 2

	drawCalls := 0

	// –°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å —à–∞–≥–æ–º 0.5
	for dy := -halfHeight; dy <= halfHeight; dy += 0.5 {
		_ = y + dy // currentY (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç–º—É–ª—è—Ü–∏–∏)

		var leftEdgeX, rightEdgeX float32
		if dy <= 0 {
			t := (dy + halfHeight) / halfHeight
			leftEdgeX = x + t*(x-halfWidth-x)
			rightEdgeX = x + t*(x+halfWidth-x)
		} else {
			t := dy / halfHeight
			leftEdgeX = (x - halfWidth) + t*(x-(x-halfWidth))
			rightEdgeX = (x + halfWidth) + t*(x-(x+halfWidth))
		}

		if rightEdgeX > leftEdgeX {
			drawCalls++ // –≠–º—É–ª—è—Ü–∏—è StrokeLine
		}
	}

	// –ì—Ä–∞–Ω–∏—Ü—ã (4 –ª–∏–Ω–∏–∏)
	if zoom > 0.3 {
		drawCalls += 4
	}

	return drawCalls
}

// –ù–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
func newDiamondAlgorithm(x, y, zoom float32, col color.RGBA) int {
	if zoom < 0.5 {
		return 1 // –¢–æ—á–∫–∞
	}

	if zoom < 1.0 {
		return 1 // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
	}

	_ = float32(TileWidth) * zoom / 2 // halfWidth (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç–º—É–ª—è—Ü–∏–∏)
	halfHeight := float32(TileHeight) * zoom / 2

	steps := int(halfHeight)
	if steps > 12 {
		steps = 12
	}
	if steps < 3 {
		steps = 3
	}

	drawCalls := steps // –õ–∏–Ω–∏–∏ –∑–∞–ª–∏–≤–∫–∏

	// –ì—Ä–∞–Ω–∏—Ü—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä—É–ø–Ω–æ–º zoom
	if zoom > 1.5 {
		drawCalls += 4
	}

	return drawCalls
}

// –ë–µ–Ω—á–º–∞—Ä–∫ —Ñ—É–Ω–∫—Ü–∏—è
func benchmarkAlgorithm(name string, algorithm func(float32, float32, float32, color.RGBA) int, iterations int) time.Duration {
	col := color.RGBA{R: 50, G: 150, B: 50, A: 255}
	totalDrawCalls := 0

	start := time.Now()

	for i := 0; i < iterations; i++ {
		// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç—ã 50x50 —Ç–∞–π–ª–æ–≤
		for y := 0; y < 50; y++ {
			for x := 0; x < 50; x++ {
				zoom := float32(1.0 + float32(i%4)*0.5) // –†–∞–∑–ª–∏—á–Ω—ã–µ zoom —É—Ä–æ–≤–Ω–∏
				totalDrawCalls += algorithm(float32(x*32), float32(y*16), zoom, col)
			}
		}
	}

	elapsed := time.Since(start)

	fmt.Printf("%s: %d –∏—Ç–µ—Ä–∞—Ü–∏–π, %d draw calls, –≤—Ä–µ–º—è: %v\n",
		name, iterations, totalDrawCalls, elapsed)

	return elapsed
}

func main() {
	runtime.GOMAXPROCS(runtime.NumCPU())

	fmt.Println("üöÄ –ë–µ–Ω—á–º–∞—Ä–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ä–æ–º–±–æ–≤")
	fmt.Println("=====================================")

	iterations := 1000
	fmt.Printf("–¢–µ—Å—Ç–∏—Ä—É–µ–º %d –∏—Ç–µ—Ä–∞—Ü–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞—Ä—Ç—ã 50x50 —Ç–∞–π–ª–æ–≤\n\n", iterations)

	// –ü—Ä–æ–≥—Ä–µ–≤ CPU
	fmt.Println("üî• –ü—Ä–æ–≥—Ä–µ–≤ CPU...")
	benchmarkAlgorithm("–ü—Ä–æ–≥—Ä–µ–≤", newDiamondAlgorithm, 100)

	fmt.Println("\nüìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã:")

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
	oldTime := benchmarkAlgorithm("–°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (64+ –ª–∏–Ω–∏–π)", oldDiamondAlgorithm, iterations)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
	newTime := benchmarkAlgorithm("–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (LOD + –ª–∏–º–∏—Ç—ã)", newDiamondAlgorithm, iterations)

	// –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	fmt.Println("\nüìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
	fmt.Printf("–°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: %v\n", oldTime)
	fmt.Printf("–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:  %v\n", newTime)

	if newTime < oldTime {
		speedup := float64(oldTime) / float64(newTime)
		fmt.Printf("üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: %.2fx (–Ω–∞ %.1f%% –±—ã—Å—Ç—Ä–µ–µ)\n", speedup, (speedup-1)*100)
	} else {
		slowdown := float64(newTime) / float64(oldTime)
		fmt.Printf("üêå –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ: %.2fx (–Ω–∞ %.1f%% –º–µ–¥–ª–µ–Ω–Ω–µ–µ)\n", slowdown, (slowdown-1)*100)
	}

	// –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ draw calls –ø–æ zoom —É—Ä–æ–≤–Ω—è–º
	fmt.Println("\nüîç –ê–Ω–∞–ª–∏–∑ draw calls –ø–æ zoom —É—Ä–æ–≤–Ω—è–º:")

	col := color.RGBA{R: 50, G: 150, B: 50, A: 255}
	zooms := []float32{0.25, 0.5, 1.0, 1.5, 2.0, 4.0}

	fmt.Printf("%-10s %-15s %-15s %-15s\n", "Zoom", "–°—Ç–∞—Ä—ã–π", "–ù–æ–≤—ã–π", "–≠–∫–æ–Ω–æ–º–∏—è")
	fmt.Println("--------------------------------------------------------")

	for _, zoom := range zooms {
		oldCalls := oldDiamondAlgorithm(100, 100, zoom, col)
		newCalls := newDiamondAlgorithm(100, 100, zoom, col)
		savings := float64(oldCalls-newCalls) / float64(oldCalls) * 100

		fmt.Printf("%-10.2f %-15d %-15d %-14.1f%%\n", zoom, oldCalls, newCalls, savings)
	}

	fmt.Println("\n‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
}
