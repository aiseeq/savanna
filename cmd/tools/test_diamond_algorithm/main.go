package main

import (
	"fmt"
	"math"
)

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ä–æ–º–±–∞ –±–µ–∑ GUI
func main() {
	fmt.Println("üî∑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ä–æ–º–±–∞")
	fmt.Println("=========================================")

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ–º–±–∞
	const TileWidth = 32
	const TileHeight = 16
	zoom := float32(2.0) // 2x zoom –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

	halfWidth := float32(TileWidth) * zoom / 2   // 32
	halfHeight := float32(TileHeight) * zoom / 2 // 16

	centerX, centerY := float32(50), float32(50)

	fmt.Printf("–†–æ–º–±: —Ü–µ–Ω—Ç—Ä (%.0f, %.0f), –ø–æ–ª—É—à–∏—Ä–∏–Ω–∞ %.0f, –ø–æ–ª—É–≤—ã—Å–æ—Ç–∞ %.0f\n",
		centerX, centerY, halfWidth, halfHeight)

	// –ö–æ–ø–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
	steps := int(halfHeight)
	if steps > 12 {
		steps = 12
	}
	if steps < 3 {
		steps = 3
	}

	fmt.Printf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π: %d\n\n", steps)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ª–∏–Ω–∏—é
	totalHeight := halfHeight * 2
	for i := 0; i < steps; i++ {
		progress := float32(i) / float32(steps-1)
		currentY := centerY - halfHeight + progress*totalHeight

		var width float32
		if progress <= 0.5 {
			t := progress * 2
			width = t * halfWidth * 2
		} else {
			t := (progress - 0.5) * 2
			width = (1 - t) * halfWidth * 2
		}

		leftX := centerX - width/2
		rightX := centerX + width/2

		fmt.Printf("–õ–∏–Ω–∏—è %2d: Y=%.1f, —à–∏—Ä–∏–Ω–∞=%.1f, –æ—Ç X=%.1f –¥–æ X=%.1f\n",
			i+1, currentY, width, leftX, rightX)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ
	fmt.Println("\nüîç –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏:")
	centerLines := 0
	for i := 0; i < steps; i++ {
		progress := float32(i) / float32(steps-1)
		currentY := centerY - halfHeight + progress*totalHeight

		if math.Abs(float64(currentY-centerY)) < 1.0 {
			centerLines++
			fmt.Printf("  –õ–∏–Ω–∏—è —Ä—è–¥–æ–º —Å —Ü–µ–Ω—Ç—Ä–æ–º: Y=%.1f (—Ü–µ–Ω—Ç—Ä Y=%.0f)\n", currentY, centerY)
		}
	}

	if centerLines > 1 {
		fmt.Printf("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: %d –ª–∏–Ω–∏–π —Ä—è–¥–æ–º —Å —Ü–µ–Ω—Ç—Ä–æ–º!\n", centerLines)
	} else {
		fmt.Printf("‚úÖ –û–ö: %d –ª–∏–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏\n", centerLines)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ —É–≥–ª–æ–≤ —Ä–æ–º–±–∞
	fmt.Println("\nüî∑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≥–ª–æ–≤ —Ä–æ–º–±–∞:")

	topY := centerY - halfHeight
	bottomY := centerY + halfHeight

	fmt.Printf("–í–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª: Y=%.1f\n", topY)
	fmt.Printf("–ù–∏–∂–Ω–∏–π —É–≥–æ–ª: Y=%.1f\n", bottomY)

	// –ü–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö—É
	firstProgress := float32(0) / float32(steps-1)
	firstY := centerY - halfHeight + firstProgress*totalHeight
	fmt.Printf("–ü–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è: Y=%.1f (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –≤–µ—Ä—Ö–∞: %.1f)\n", firstY, math.Abs(float64(firstY-topY)))

	// –ü–æ—Å–ª–µ–¥–Ω—è—è –ª–∏–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–∏–∑–∫–æ –∫ –Ω–∏–∑—É
	lastProgress := float32(steps-1) / float32(steps-1)
	lastY := centerY - halfHeight + lastProgress*totalHeight
	fmt.Printf("–ü–æ—Å–ª–µ–¥–Ω—è—è –ª–∏–Ω–∏—è: Y=%.1f (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–∏–∑–∞: %.1f)\n", lastY, math.Abs(float64(lastY-bottomY)))

	fmt.Println("\n‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!")
}
