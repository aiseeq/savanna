package main

import (
	"fmt"
	"os"
	"path/filepath"
)

func main() {
	fmt.Println("üéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–π—Ç–æ–≤")
	fmt.Println("=================================")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
	assetsDir := "assets/animations"

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if _, err := os.Stat(assetsDir); os.IsNotExist(err) {
		fmt.Printf("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n", assetsDir)
		return
	}

	fmt.Printf("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è %s –Ω–∞–π–¥–µ–Ω–∞\n", assetsDir)

	// –ê–Ω–∏–º–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è
	expectedSprites := []struct {
		prefix   string
		animName string
		frames   int
	}{
		{"hare", "idle", 2},
		{"hare", "walk", 2},
		{"hare", "run", 2},
		{"hare", "attack", 2},
		{"hare", "eat", 2},
		{"hare", "dead", 2},
		{"wolf", "idle", 2},
		{"wolf", "walk", 2},
		{"wolf", "run", 2},
		{"wolf", "attack", 2},
		{"wolf", "eat", 2},
		{"wolf", "dead", 2},
	}

	missingFiles := 0
	totalFiles := 0

	fmt.Println("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–ø—Ä–∞–π—Ç–æ–≤:")

	for _, sprite := range expectedSprites {
		for frame := 1; frame <= sprite.frames; frame++ {
			filename := fmt.Sprintf("%s_%s_%d.png", sprite.prefix, sprite.animName, frame)
			filePath := filepath.Join(assetsDir, filename)
			totalFiles++

			if _, err := os.Stat(filePath); os.IsNotExist(err) {
				fmt.Printf("‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢: %s\n", filename)
				missingFiles++
			} else {
				fmt.Printf("‚úÖ OK: %s\n", filename)
			}
		}
	}

	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: %d/%d —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ\n", totalFiles-missingFiles, totalFiles)

	if missingFiles > 0 {
		fmt.Printf("‚ö†Ô∏è  %d —Ñ–∞–π–ª–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - —Å–ø—Ä–∞–π—Ç—ã –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ fallback\n", missingFiles)
	} else {
		fmt.Println("üéâ –í—Å–µ —Ñ–∞–π–ª—ã —Å–ø—Ä–∞–π—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω—ã!")
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	fmt.Println("\nüìÅ –§–∞–π–ª—ã –≤ assets/animations:")
	files, err := os.ReadDir(assetsDir)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v\n", err)
		return
	}

	for _, file := range files {
		if !file.IsDir() && filepath.Ext(file.Name()) == ".png" {
			fmt.Printf("  üìÑ %s\n", file.Name())
		}
	}
}
